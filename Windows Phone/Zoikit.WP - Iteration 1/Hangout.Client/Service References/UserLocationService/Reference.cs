//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Hangout.Client.UserLocationService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Locations")]
    public partial class Location : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AddressField;
        
        private Hangout.Client.UserLocationService.City CityField;
        
        private double LatitudeField;
        
        private System.Guid LocationIDField;
        
        private double LongitudeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Hangout.Client.UserLocationService.City City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid LocationID {
            get {
                return this.LocationIDField;
            }
            set {
                if ((this.LocationIDField.Equals(value) != true)) {
                    this.LocationIDField = value;
                    this.RaisePropertyChanged("LocationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="City", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Locations")]
    public partial class City : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Hangout.Client.UserLocationService.Country CountryField;
        
        private System.Guid IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Hangout.Client.UserLocationService.Country Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Country", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Locations")]
    public partial class Country : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserLocationService.IUserLocationService")]
    public interface IUserLocationService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserLocationService/UpdateUserLocation", ReplyAction="http://tempuri.org/IUserLocationService/UpdateUserLocationResponse")]
        System.IAsyncResult BeginUpdateUserLocation(System.Guid userId, double latitude, double longitude, string zat, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.UserLocationService.Location EndUpdateUserLocation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserLocationService/GetCityByLocation", ReplyAction="http://tempuri.org/IUserLocationService/GetCityByLocationResponse")]
        System.IAsyncResult BeginGetCityByLocation(System.Guid userId, double latitude, double longitude, string zat, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.UserLocationService.City EndGetCityByLocation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserLocationService/SearchCities", ReplyAction="http://tempuri.org/IUserLocationService/SearchCitiesResponse")]
        System.IAsyncResult BeginSearchCities(System.Guid userId, string zat, string query, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Hangout.Client.UserLocationService.City> EndSearchCities(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserLocationServiceChannel : Hangout.Client.UserLocationService.IUserLocationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateUserLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateUserLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.UserLocationService.Location Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.UserLocationService.Location)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCityByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCityByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.UserLocationService.City Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.UserLocationService.City)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchCitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchCitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Hangout.Client.UserLocationService.City> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Hangout.Client.UserLocationService.City>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserLocationServiceClient : System.ServiceModel.ClientBase<Hangout.Client.UserLocationService.IUserLocationService>, Hangout.Client.UserLocationService.IUserLocationService {
        
        private BeginOperationDelegate onBeginUpdateUserLocationDelegate;
        
        private EndOperationDelegate onEndUpdateUserLocationDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserLocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCityByLocationDelegate;
        
        private EndOperationDelegate onEndGetCityByLocationDelegate;
        
        private System.Threading.SendOrPostCallback onGetCityByLocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchCitiesDelegate;
        
        private EndOperationDelegate onEndSearchCitiesDelegate;
        
        private System.Threading.SendOrPostCallback onSearchCitiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public UserLocationServiceClient() {
        }
        
        public UserLocationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserLocationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserLocationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserLocationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<UpdateUserLocationCompletedEventArgs> UpdateUserLocationCompleted;
        
        public event System.EventHandler<GetCityByLocationCompletedEventArgs> GetCityByLocationCompleted;
        
        public event System.EventHandler<SearchCitiesCompletedEventArgs> SearchCitiesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.UserLocationService.IUserLocationService.BeginUpdateUserLocation(System.Guid userId, double latitude, double longitude, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUserLocation(userId, latitude, longitude, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.UserLocationService.Location Hangout.Client.UserLocationService.IUserLocationService.EndUpdateUserLocation(System.IAsyncResult result) {
            return base.Channel.EndUpdateUserLocation(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUserLocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            double latitude = ((double)(inValues[1]));
            double longitude = ((double)(inValues[2]));
            string zat = ((string)(inValues[3]));
            return ((Hangout.Client.UserLocationService.IUserLocationService)(this)).BeginUpdateUserLocation(userId, latitude, longitude, zat, callback, asyncState);
        }
        
        private object[] OnEndUpdateUserLocation(System.IAsyncResult result) {
            Hangout.Client.UserLocationService.Location retVal = ((Hangout.Client.UserLocationService.IUserLocationService)(this)).EndUpdateUserLocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateUserLocationCompleted(object state) {
            if ((this.UpdateUserLocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserLocationCompleted(this, new UpdateUserLocationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserLocationAsync(System.Guid userId, double latitude, double longitude, string zat) {
            this.UpdateUserLocationAsync(userId, latitude, longitude, zat, null);
        }
        
        public void UpdateUserLocationAsync(System.Guid userId, double latitude, double longitude, string zat, object userState) {
            if ((this.onBeginUpdateUserLocationDelegate == null)) {
                this.onBeginUpdateUserLocationDelegate = new BeginOperationDelegate(this.OnBeginUpdateUserLocation);
            }
            if ((this.onEndUpdateUserLocationDelegate == null)) {
                this.onEndUpdateUserLocationDelegate = new EndOperationDelegate(this.OnEndUpdateUserLocation);
            }
            if ((this.onUpdateUserLocationCompletedDelegate == null)) {
                this.onUpdateUserLocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserLocationCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserLocationDelegate, new object[] {
                        userId,
                        latitude,
                        longitude,
                        zat}, this.onEndUpdateUserLocationDelegate, this.onUpdateUserLocationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.UserLocationService.IUserLocationService.BeginGetCityByLocation(System.Guid userId, double latitude, double longitude, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCityByLocation(userId, latitude, longitude, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.UserLocationService.City Hangout.Client.UserLocationService.IUserLocationService.EndGetCityByLocation(System.IAsyncResult result) {
            return base.Channel.EndGetCityByLocation(result);
        }
        
        private System.IAsyncResult OnBeginGetCityByLocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            double latitude = ((double)(inValues[1]));
            double longitude = ((double)(inValues[2]));
            string zat = ((string)(inValues[3]));
            return ((Hangout.Client.UserLocationService.IUserLocationService)(this)).BeginGetCityByLocation(userId, latitude, longitude, zat, callback, asyncState);
        }
        
        private object[] OnEndGetCityByLocation(System.IAsyncResult result) {
            Hangout.Client.UserLocationService.City retVal = ((Hangout.Client.UserLocationService.IUserLocationService)(this)).EndGetCityByLocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCityByLocationCompleted(object state) {
            if ((this.GetCityByLocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCityByLocationCompleted(this, new GetCityByLocationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCityByLocationAsync(System.Guid userId, double latitude, double longitude, string zat) {
            this.GetCityByLocationAsync(userId, latitude, longitude, zat, null);
        }
        
        public void GetCityByLocationAsync(System.Guid userId, double latitude, double longitude, string zat, object userState) {
            if ((this.onBeginGetCityByLocationDelegate == null)) {
                this.onBeginGetCityByLocationDelegate = new BeginOperationDelegate(this.OnBeginGetCityByLocation);
            }
            if ((this.onEndGetCityByLocationDelegate == null)) {
                this.onEndGetCityByLocationDelegate = new EndOperationDelegate(this.OnEndGetCityByLocation);
            }
            if ((this.onGetCityByLocationCompletedDelegate == null)) {
                this.onGetCityByLocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCityByLocationCompleted);
            }
            base.InvokeAsync(this.onBeginGetCityByLocationDelegate, new object[] {
                        userId,
                        latitude,
                        longitude,
                        zat}, this.onEndGetCityByLocationDelegate, this.onGetCityByLocationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.UserLocationService.IUserLocationService.BeginSearchCities(System.Guid userId, string zat, string query, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchCities(userId, zat, query, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Hangout.Client.UserLocationService.City> Hangout.Client.UserLocationService.IUserLocationService.EndSearchCities(System.IAsyncResult result) {
            return base.Channel.EndSearchCities(result);
        }
        
        private System.IAsyncResult OnBeginSearchCities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string zat = ((string)(inValues[1]));
            string query = ((string)(inValues[2]));
            return ((Hangout.Client.UserLocationService.IUserLocationService)(this)).BeginSearchCities(userId, zat, query, callback, asyncState);
        }
        
        private object[] OnEndSearchCities(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Hangout.Client.UserLocationService.City> retVal = ((Hangout.Client.UserLocationService.IUserLocationService)(this)).EndSearchCities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSearchCitiesCompleted(object state) {
            if ((this.SearchCitiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchCitiesCompleted(this, new SearchCitiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchCitiesAsync(System.Guid userId, string zat, string query) {
            this.SearchCitiesAsync(userId, zat, query, null);
        }
        
        public void SearchCitiesAsync(System.Guid userId, string zat, string query, object userState) {
            if ((this.onBeginSearchCitiesDelegate == null)) {
                this.onBeginSearchCitiesDelegate = new BeginOperationDelegate(this.OnBeginSearchCities);
            }
            if ((this.onEndSearchCitiesDelegate == null)) {
                this.onEndSearchCitiesDelegate = new EndOperationDelegate(this.OnEndSearchCities);
            }
            if ((this.onSearchCitiesCompletedDelegate == null)) {
                this.onSearchCitiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchCitiesCompleted);
            }
            base.InvokeAsync(this.onBeginSearchCitiesDelegate, new object[] {
                        userId,
                        zat,
                        query}, this.onEndSearchCitiesDelegate, this.onSearchCitiesCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Hangout.Client.UserLocationService.IUserLocationService CreateChannel() {
            return new UserLocationServiceClientChannel(this);
        }
        
        private class UserLocationServiceClientChannel : ChannelBase<Hangout.Client.UserLocationService.IUserLocationService>, Hangout.Client.UserLocationService.IUserLocationService {
            
            public UserLocationServiceClientChannel(System.ServiceModel.ClientBase<Hangout.Client.UserLocationService.IUserLocationService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginUpdateUserLocation(System.Guid userId, double latitude, double longitude, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = latitude;
                _args[2] = longitude;
                _args[3] = zat;
                System.IAsyncResult _result = base.BeginInvoke("UpdateUserLocation", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.UserLocationService.Location EndUpdateUserLocation(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.UserLocationService.Location _result = ((Hangout.Client.UserLocationService.Location)(base.EndInvoke("UpdateUserLocation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCityByLocation(System.Guid userId, double latitude, double longitude, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = latitude;
                _args[2] = longitude;
                _args[3] = zat;
                System.IAsyncResult _result = base.BeginInvoke("GetCityByLocation", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.UserLocationService.City EndGetCityByLocation(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.UserLocationService.City _result = ((Hangout.Client.UserLocationService.City)(base.EndInvoke("GetCityByLocation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSearchCities(System.Guid userId, string zat, string query, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = zat;
                _args[2] = query;
                System.IAsyncResult _result = base.BeginInvoke("SearchCities", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Hangout.Client.UserLocationService.City> EndSearchCities(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Hangout.Client.UserLocationService.City> _result = ((System.Collections.ObjectModel.ObservableCollection<Hangout.Client.UserLocationService.City>)(base.EndInvoke("SearchCities", _args, result)));
                return _result;
            }
        }
    }
}
