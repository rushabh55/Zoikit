//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Hangout.Client.AppAuthenticationService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AppAuthenticationTag", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Accounts")]
    public partial class AppAuthenticationTag : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Hangout.Client.AppAuthenticationService.AccountStatus StatusField;
        
        private string TagField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Hangout.Client.AppAuthenticationService.AccountStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tag {
            get {
                return this.TagField;
            }
            set {
                if ((object.ReferenceEquals(this.TagField, value) != true)) {
                    this.TagField = value;
                    this.RaisePropertyChanged("Tag");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountStatus", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Core.Accounts")]
    public enum AccountStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Blocked = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Updated = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccountCreated = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Activated = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LoggedIn = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LogInFailed = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlreadyRegistered = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UsernameInvalid = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AppInvalid = 9,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AppAuthenticationService.IAppAuthentication")]
    public interface IAppAuthentication {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAppAuthentication/Register", ReplyAction="http://tempuri.org/IAppAuthentication/RegisterResponse")]
        System.IAsyncResult BeginRegister(string username, string email, string password, string appId, string appToken, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.AppAuthenticationService.AppAuthenticationTag EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAppAuthentication/RegisterByID", ReplyAction="http://tempuri.org/IAppAuthentication/RegisterByIDResponse")]
        System.IAsyncResult BeginRegisterByID(System.Guid userId, string username, string email, string password, string appId, string appToken, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.AppAuthenticationService.AppAuthenticationTag EndRegisterByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAppAuthentication/Login", ReplyAction="http://tempuri.org/IAppAuthentication/LoginResponse")]
        System.IAsyncResult BeginLogin(string username, string password, string appId, string appToken, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.AppAuthenticationService.AppAuthenticationTag EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAppAuthentication/ConfirmEmail", ReplyAction="http://tempuri.org/IAppAuthentication/ConfirmEmailResponse")]
        System.IAsyncResult BeginConfirmEmail(System.Guid userId, string code, string zat, System.AsyncCallback callback, object asyncState);
        
        bool EndConfirmEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAppAuthentication/ChangePassword", ReplyAction="http://tempuri.org/IAppAuthentication/ChangePasswordResponse")]
        System.IAsyncResult BeginChangePassword(System.Guid userId, string oldPass, string newPass, string appId, string appToken, System.AsyncCallback callback, object asyncState);
        
        bool EndChangePassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAppAuthentication/ResetPassword", ReplyAction="http://tempuri.org/IAppAuthentication/ResetPasswordResponse")]
        System.IAsyncResult BeginResetPassword(string email, string appId, string appToken, System.AsyncCallback callback, object asyncState);
        
        bool EndResetPassword(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAppAuthenticationChannel : Hangout.Client.AppAuthenticationService.IAppAuthentication, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.AppAuthenticationService.AppAuthenticationTag Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.AppAuthenticationService.AppAuthenticationTag)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.AppAuthenticationService.AppAuthenticationTag Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.AppAuthenticationService.AppAuthenticationTag)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.AppAuthenticationService.AppAuthenticationTag Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.AppAuthenticationService.AppAuthenticationTag)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConfirmEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConfirmEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AppAuthenticationClient : System.ServiceModel.ClientBase<Hangout.Client.AppAuthenticationService.IAppAuthentication>, Hangout.Client.AppAuthenticationService.IAppAuthentication {
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterByIDDelegate;
        
        private EndOperationDelegate onEndRegisterByIDDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginConfirmEmailDelegate;
        
        private EndOperationDelegate onEndConfirmEmailDelegate;
        
        private System.Threading.SendOrPostCallback onConfirmEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangePasswordDelegate;
        
        private EndOperationDelegate onEndChangePasswordDelegate;
        
        private System.Threading.SendOrPostCallback onChangePasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetPasswordDelegate;
        
        private EndOperationDelegate onEndResetPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onResetPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public AppAuthenticationClient() {
        }
        
        public AppAuthenticationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AppAuthenticationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppAuthenticationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppAuthenticationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<RegisterCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<RegisterByIDCompletedEventArgs> RegisterByIDCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<ConfirmEmailCompletedEventArgs> ConfirmEmailCompleted;
        
        public event System.EventHandler<ChangePasswordCompletedEventArgs> ChangePasswordCompleted;
        
        public event System.EventHandler<ResetPasswordCompletedEventArgs> ResetPasswordCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.AppAuthenticationService.IAppAuthentication.BeginRegister(string username, string email, string password, string appId, string appToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(username, email, password, appId, appToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.AppAuthenticationService.AppAuthenticationTag Hangout.Client.AppAuthenticationService.IAppAuthentication.EndRegister(System.IAsyncResult result) {
            return base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string email = ((string)(inValues[1]));
            string password = ((string)(inValues[2]));
            string appId = ((string)(inValues[3]));
            string appToken = ((string)(inValues[4]));
            return ((Hangout.Client.AppAuthenticationService.IAppAuthentication)(this)).BeginRegister(username, email, password, appId, appToken, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            Hangout.Client.AppAuthenticationService.AppAuthenticationTag retVal = ((Hangout.Client.AppAuthenticationService.IAppAuthentication)(this)).EndRegister(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new RegisterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(string username, string email, string password, string appId, string appToken) {
            this.RegisterAsync(username, email, password, appId, appToken, null);
        }
        
        public void RegisterAsync(string username, string email, string password, string appId, string appToken, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        username,
                        email,
                        password,
                        appId,
                        appToken}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.AppAuthenticationService.IAppAuthentication.BeginRegisterByID(System.Guid userId, string username, string email, string password, string appId, string appToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterByID(userId, username, email, password, appId, appToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.AppAuthenticationService.AppAuthenticationTag Hangout.Client.AppAuthenticationService.IAppAuthentication.EndRegisterByID(System.IAsyncResult result) {
            return base.Channel.EndRegisterByID(result);
        }
        
        private System.IAsyncResult OnBeginRegisterByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string username = ((string)(inValues[1]));
            string email = ((string)(inValues[2]));
            string password = ((string)(inValues[3]));
            string appId = ((string)(inValues[4]));
            string appToken = ((string)(inValues[5]));
            return ((Hangout.Client.AppAuthenticationService.IAppAuthentication)(this)).BeginRegisterByID(userId, username, email, password, appId, appToken, callback, asyncState);
        }
        
        private object[] OnEndRegisterByID(System.IAsyncResult result) {
            Hangout.Client.AppAuthenticationService.AppAuthenticationTag retVal = ((Hangout.Client.AppAuthenticationService.IAppAuthentication)(this)).EndRegisterByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterByIDCompleted(object state) {
            if ((this.RegisterByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterByIDCompleted(this, new RegisterByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterByIDAsync(System.Guid userId, string username, string email, string password, string appId, string appToken) {
            this.RegisterByIDAsync(userId, username, email, password, appId, appToken, null);
        }
        
        public void RegisterByIDAsync(System.Guid userId, string username, string email, string password, string appId, string appToken, object userState) {
            if ((this.onBeginRegisterByIDDelegate == null)) {
                this.onBeginRegisterByIDDelegate = new BeginOperationDelegate(this.OnBeginRegisterByID);
            }
            if ((this.onEndRegisterByIDDelegate == null)) {
                this.onEndRegisterByIDDelegate = new EndOperationDelegate(this.OnEndRegisterByID);
            }
            if ((this.onRegisterByIDCompletedDelegate == null)) {
                this.onRegisterByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterByIDCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterByIDDelegate, new object[] {
                        userId,
                        username,
                        email,
                        password,
                        appId,
                        appToken}, this.onEndRegisterByIDDelegate, this.onRegisterByIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.AppAuthenticationService.IAppAuthentication.BeginLogin(string username, string password, string appId, string appToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(username, password, appId, appToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.AppAuthenticationService.AppAuthenticationTag Hangout.Client.AppAuthenticationService.IAppAuthentication.EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string appId = ((string)(inValues[2]));
            string appToken = ((string)(inValues[3]));
            return ((Hangout.Client.AppAuthenticationService.IAppAuthentication)(this)).BeginLogin(username, password, appId, appToken, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            Hangout.Client.AppAuthenticationService.AppAuthenticationTag retVal = ((Hangout.Client.AppAuthenticationService.IAppAuthentication)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string username, string password, string appId, string appToken) {
            this.LoginAsync(username, password, appId, appToken, null);
        }
        
        public void LoginAsync(string username, string password, string appId, string appToken, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        username,
                        password,
                        appId,
                        appToken}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.AppAuthenticationService.IAppAuthentication.BeginConfirmEmail(System.Guid userId, string code, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConfirmEmail(userId, code, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Hangout.Client.AppAuthenticationService.IAppAuthentication.EndConfirmEmail(System.IAsyncResult result) {
            return base.Channel.EndConfirmEmail(result);
        }
        
        private System.IAsyncResult OnBeginConfirmEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string code = ((string)(inValues[1]));
            string zat = ((string)(inValues[2]));
            return ((Hangout.Client.AppAuthenticationService.IAppAuthentication)(this)).BeginConfirmEmail(userId, code, zat, callback, asyncState);
        }
        
        private object[] OnEndConfirmEmail(System.IAsyncResult result) {
            bool retVal = ((Hangout.Client.AppAuthenticationService.IAppAuthentication)(this)).EndConfirmEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConfirmEmailCompleted(object state) {
            if ((this.ConfirmEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConfirmEmailCompleted(this, new ConfirmEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConfirmEmailAsync(System.Guid userId, string code, string zat) {
            this.ConfirmEmailAsync(userId, code, zat, null);
        }
        
        public void ConfirmEmailAsync(System.Guid userId, string code, string zat, object userState) {
            if ((this.onBeginConfirmEmailDelegate == null)) {
                this.onBeginConfirmEmailDelegate = new BeginOperationDelegate(this.OnBeginConfirmEmail);
            }
            if ((this.onEndConfirmEmailDelegate == null)) {
                this.onEndConfirmEmailDelegate = new EndOperationDelegate(this.OnEndConfirmEmail);
            }
            if ((this.onConfirmEmailCompletedDelegate == null)) {
                this.onConfirmEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConfirmEmailCompleted);
            }
            base.InvokeAsync(this.onBeginConfirmEmailDelegate, new object[] {
                        userId,
                        code,
                        zat}, this.onEndConfirmEmailDelegate, this.onConfirmEmailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.AppAuthenticationService.IAppAuthentication.BeginChangePassword(System.Guid userId, string oldPass, string newPass, string appId, string appToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangePassword(userId, oldPass, newPass, appId, appToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Hangout.Client.AppAuthenticationService.IAppAuthentication.EndChangePassword(System.IAsyncResult result) {
            return base.Channel.EndChangePassword(result);
        }
        
        private System.IAsyncResult OnBeginChangePassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string oldPass = ((string)(inValues[1]));
            string newPass = ((string)(inValues[2]));
            string appId = ((string)(inValues[3]));
            string appToken = ((string)(inValues[4]));
            return ((Hangout.Client.AppAuthenticationService.IAppAuthentication)(this)).BeginChangePassword(userId, oldPass, newPass, appId, appToken, callback, asyncState);
        }
        
        private object[] OnEndChangePassword(System.IAsyncResult result) {
            bool retVal = ((Hangout.Client.AppAuthenticationService.IAppAuthentication)(this)).EndChangePassword(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChangePasswordCompleted(object state) {
            if ((this.ChangePasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangePasswordAsync(System.Guid userId, string oldPass, string newPass, string appId, string appToken) {
            this.ChangePasswordAsync(userId, oldPass, newPass, appId, appToken, null);
        }
        
        public void ChangePasswordAsync(System.Guid userId, string oldPass, string newPass, string appId, string appToken, object userState) {
            if ((this.onBeginChangePasswordDelegate == null)) {
                this.onBeginChangePasswordDelegate = new BeginOperationDelegate(this.OnBeginChangePassword);
            }
            if ((this.onEndChangePasswordDelegate == null)) {
                this.onEndChangePasswordDelegate = new EndOperationDelegate(this.OnEndChangePassword);
            }
            if ((this.onChangePasswordCompletedDelegate == null)) {
                this.onChangePasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangePasswordCompleted);
            }
            base.InvokeAsync(this.onBeginChangePasswordDelegate, new object[] {
                        userId,
                        oldPass,
                        newPass,
                        appId,
                        appToken}, this.onEndChangePasswordDelegate, this.onChangePasswordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.AppAuthenticationService.IAppAuthentication.BeginResetPassword(string email, string appId, string appToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResetPassword(email, appId, appToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Hangout.Client.AppAuthenticationService.IAppAuthentication.EndResetPassword(System.IAsyncResult result) {
            return base.Channel.EndResetPassword(result);
        }
        
        private System.IAsyncResult OnBeginResetPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            string appId = ((string)(inValues[1]));
            string appToken = ((string)(inValues[2]));
            return ((Hangout.Client.AppAuthenticationService.IAppAuthentication)(this)).BeginResetPassword(email, appId, appToken, callback, asyncState);
        }
        
        private object[] OnEndResetPassword(System.IAsyncResult result) {
            bool retVal = ((Hangout.Client.AppAuthenticationService.IAppAuthentication)(this)).EndResetPassword(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResetPasswordCompleted(object state) {
            if ((this.ResetPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetPasswordCompleted(this, new ResetPasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetPasswordAsync(string email, string appId, string appToken) {
            this.ResetPasswordAsync(email, appId, appToken, null);
        }
        
        public void ResetPasswordAsync(string email, string appId, string appToken, object userState) {
            if ((this.onBeginResetPasswordDelegate == null)) {
                this.onBeginResetPasswordDelegate = new BeginOperationDelegate(this.OnBeginResetPassword);
            }
            if ((this.onEndResetPasswordDelegate == null)) {
                this.onEndResetPasswordDelegate = new EndOperationDelegate(this.OnEndResetPassword);
            }
            if ((this.onResetPasswordCompletedDelegate == null)) {
                this.onResetPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginResetPasswordDelegate, new object[] {
                        email,
                        appId,
                        appToken}, this.onEndResetPasswordDelegate, this.onResetPasswordCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Hangout.Client.AppAuthenticationService.IAppAuthentication CreateChannel() {
            return new AppAuthenticationClientChannel(this);
        }
        
        private class AppAuthenticationClientChannel : ChannelBase<Hangout.Client.AppAuthenticationService.IAppAuthentication>, Hangout.Client.AppAuthenticationService.IAppAuthentication {
            
            public AppAuthenticationClientChannel(System.ServiceModel.ClientBase<Hangout.Client.AppAuthenticationService.IAppAuthentication> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRegister(string username, string email, string password, string appId, string appToken, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = username;
                _args[1] = email;
                _args[2] = password;
                _args[3] = appId;
                _args[4] = appToken;
                System.IAsyncResult _result = base.BeginInvoke("Register", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.AppAuthenticationService.AppAuthenticationTag EndRegister(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.AppAuthenticationService.AppAuthenticationTag _result = ((Hangout.Client.AppAuthenticationService.AppAuthenticationTag)(base.EndInvoke("Register", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRegisterByID(System.Guid userId, string username, string email, string password, string appId, string appToken, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = userId;
                _args[1] = username;
                _args[2] = email;
                _args[3] = password;
                _args[4] = appId;
                _args[5] = appToken;
                System.IAsyncResult _result = base.BeginInvoke("RegisterByID", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.AppAuthenticationService.AppAuthenticationTag EndRegisterByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.AppAuthenticationService.AppAuthenticationTag _result = ((Hangout.Client.AppAuthenticationService.AppAuthenticationTag)(base.EndInvoke("RegisterByID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogin(string username, string password, string appId, string appToken, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = username;
                _args[1] = password;
                _args[2] = appId;
                _args[3] = appToken;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.AppAuthenticationService.AppAuthenticationTag EndLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.AppAuthenticationService.AppAuthenticationTag _result = ((Hangout.Client.AppAuthenticationService.AppAuthenticationTag)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginConfirmEmail(System.Guid userId, string code, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = code;
                _args[2] = zat;
                System.IAsyncResult _result = base.BeginInvoke("ConfirmEmail", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndConfirmEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ConfirmEmail", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChangePassword(System.Guid userId, string oldPass, string newPass, string appId, string appToken, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = userId;
                _args[1] = oldPass;
                _args[2] = newPass;
                _args[3] = appId;
                _args[4] = appToken;
                System.IAsyncResult _result = base.BeginInvoke("ChangePassword", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndChangePassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ChangePassword", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginResetPassword(string email, string appId, string appToken, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = email;
                _args[1] = appId;
                _args[2] = appToken;
                System.IAsyncResult _result = base.BeginInvoke("ResetPassword", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndResetPassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ResetPassword", _args, result)));
                return _result;
            }
        }
    }
}
