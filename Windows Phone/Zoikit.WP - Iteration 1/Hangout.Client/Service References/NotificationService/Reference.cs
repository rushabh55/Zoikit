//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Hangout.Client.NotificationService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Result", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Service")]
    public enum Result : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Notification", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Notification" +
        "")]
    public partial class Notification : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<System.DateTime> DatetimePostedField;
        
        private string DescriptionField;
        
        private bool MarkAsReadField;
        
        private System.Guid NotificationIDField;
        
        private string Param1Field;
        
        private string Param2Field;
        
        private string ProfilePicURLField;
        
        private string TitleField;
        
        private string Type1Field;
        
        private string Type2Field;
        
        private System.Guid UserIDField;
        
        private System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.CompactUser> UserListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DatetimePosted {
            get {
                return this.DatetimePostedField;
            }
            set {
                if ((this.DatetimePostedField.Equals(value) != true)) {
                    this.DatetimePostedField = value;
                    this.RaisePropertyChanged("DatetimePosted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MarkAsRead {
            get {
                return this.MarkAsReadField;
            }
            set {
                if ((this.MarkAsReadField.Equals(value) != true)) {
                    this.MarkAsReadField = value;
                    this.RaisePropertyChanged("MarkAsRead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid NotificationID {
            get {
                return this.NotificationIDField;
            }
            set {
                if ((this.NotificationIDField.Equals(value) != true)) {
                    this.NotificationIDField = value;
                    this.RaisePropertyChanged("NotificationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Param1 {
            get {
                return this.Param1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Param1Field, value) != true)) {
                    this.Param1Field = value;
                    this.RaisePropertyChanged("Param1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Param2 {
            get {
                return this.Param2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Param2Field, value) != true)) {
                    this.Param2Field = value;
                    this.RaisePropertyChanged("Param2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfilePicURL {
            get {
                return this.ProfilePicURLField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfilePicURLField, value) != true)) {
                    this.ProfilePicURLField = value;
                    this.RaisePropertyChanged("ProfilePicURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type1 {
            get {
                return this.Type1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Type1Field, value) != true)) {
                    this.Type1Field = value;
                    this.RaisePropertyChanged("Type1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type2 {
            get {
                return this.Type2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Type2Field, value) != true)) {
                    this.Type2Field = value;
                    this.RaisePropertyChanged("Type2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.CompactUser> UserList {
            get {
                return this.UserListField;
            }
            set {
                if ((object.ReferenceEquals(this.UserListField, value) != true)) {
                    this.UserListField = value;
                    this.RaisePropertyChanged("UserList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompactUser", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Accounts")]
    public partial class CompactUser : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private string ProfilePicURLField;
        
        private System.Guid UserIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfilePicURL {
            get {
                return this.ProfilePicURLField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfilePicURLField, value) != true)) {
                    this.ProfilePicURLField = value;
                    this.RaisePropertyChanged("ProfilePicURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotificationData", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Notification" +
        "")]
    public partial class NotificationData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CountField;
        
        private Hangout.Client.NotificationService.Notification NotificationField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Hangout.Client.NotificationService.Notification Notification {
            get {
                return this.NotificationField;
            }
            set {
                if ((object.ReferenceEquals(this.NotificationField, value) != true)) {
                    this.NotificationField = value;
                    this.RaisePropertyChanged("Notification");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotificationService.INotificationService")]
    public interface INotificationService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/MarkAllAsRead", ReplyAction="http://tempuri.org/INotificationService/MarkAllAsReadResponse")]
        System.IAsyncResult BeginMarkAllAsRead(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.NotificationService.Result EndMarkAllAsRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/GetNotifications", ReplyAction="http://tempuri.org/INotificationService/GetNotificationsResponse")]
        System.IAsyncResult BeginGetNotifications(System.Guid userId, int take, System.Collections.ObjectModel.ObservableCollection<System.Guid> skip, string zat, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.Notification> EndGetNotifications(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/GetNewNotifications", ReplyAction="http://tempuri.org/INotificationService/GetNewNotificationsResponse")]
        System.IAsyncResult BeginGetNewNotifications(System.Guid userId, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, string zat, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.Notification> EndGetNewNotifications(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/GetNotification", ReplyAction="http://tempuri.org/INotificationService/GetNotificationResponse")]
        System.IAsyncResult BeginGetNotification(System.Guid notificationId, System.Guid userId, string zat, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.NotificationService.Notification EndGetNotification(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/GetLastUnReadNotification", ReplyAction="http://tempuri.org/INotificationService/GetLastUnReadNotificationResponse")]
        System.IAsyncResult BeginGetLastUnReadNotification(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.NotificationService.NotificationData EndGetLastUnReadNotification(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/GetUnreadNotificationCount", ReplyAction="http://tempuri.org/INotificationService/GetUnreadNotificationCountResponse")]
        System.IAsyncResult BeginGetUnreadNotificationCount(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState);
        
        int EndGetUnreadNotificationCount(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationServiceChannel : Hangout.Client.NotificationService.INotificationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarkAllAsReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MarkAllAsReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.NotificationService.Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.NotificationService.Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNotificationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNotificationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.Notification> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.Notification>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNewNotificationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNewNotificationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.Notification> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.Notification>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.NotificationService.Notification Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.NotificationService.Notification)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLastUnReadNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLastUnReadNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.NotificationService.NotificationData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.NotificationService.NotificationData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUnreadNotificationCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUnreadNotificationCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotificationServiceClient : System.ServiceModel.ClientBase<Hangout.Client.NotificationService.INotificationService>, Hangout.Client.NotificationService.INotificationService {
        
        private BeginOperationDelegate onBeginMarkAllAsReadDelegate;
        
        private EndOperationDelegate onEndMarkAllAsReadDelegate;
        
        private System.Threading.SendOrPostCallback onMarkAllAsReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNotificationsDelegate;
        
        private EndOperationDelegate onEndGetNotificationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetNotificationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNewNotificationsDelegate;
        
        private EndOperationDelegate onEndGetNewNotificationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetNewNotificationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNotificationDelegate;
        
        private EndOperationDelegate onEndGetNotificationDelegate;
        
        private System.Threading.SendOrPostCallback onGetNotificationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLastUnReadNotificationDelegate;
        
        private EndOperationDelegate onEndGetLastUnReadNotificationDelegate;
        
        private System.Threading.SendOrPostCallback onGetLastUnReadNotificationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUnreadNotificationCountDelegate;
        
        private EndOperationDelegate onEndGetUnreadNotificationCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetUnreadNotificationCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public NotificationServiceClient() {
        }
        
        public NotificationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<MarkAllAsReadCompletedEventArgs> MarkAllAsReadCompleted;
        
        public event System.EventHandler<GetNotificationsCompletedEventArgs> GetNotificationsCompleted;
        
        public event System.EventHandler<GetNewNotificationsCompletedEventArgs> GetNewNotificationsCompleted;
        
        public event System.EventHandler<GetNotificationCompletedEventArgs> GetNotificationCompleted;
        
        public event System.EventHandler<GetLastUnReadNotificationCompletedEventArgs> GetLastUnReadNotificationCompleted;
        
        public event System.EventHandler<GetUnreadNotificationCountCompletedEventArgs> GetUnreadNotificationCountCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.NotificationService.INotificationService.BeginMarkAllAsRead(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMarkAllAsRead(userId, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.NotificationService.Result Hangout.Client.NotificationService.INotificationService.EndMarkAllAsRead(System.IAsyncResult result) {
            return base.Channel.EndMarkAllAsRead(result);
        }
        
        private System.IAsyncResult OnBeginMarkAllAsRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string zat = ((string)(inValues[1]));
            return ((Hangout.Client.NotificationService.INotificationService)(this)).BeginMarkAllAsRead(userId, zat, callback, asyncState);
        }
        
        private object[] OnEndMarkAllAsRead(System.IAsyncResult result) {
            Hangout.Client.NotificationService.Result retVal = ((Hangout.Client.NotificationService.INotificationService)(this)).EndMarkAllAsRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMarkAllAsReadCompleted(object state) {
            if ((this.MarkAllAsReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MarkAllAsReadCompleted(this, new MarkAllAsReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MarkAllAsReadAsync(System.Guid userId, string zat) {
            this.MarkAllAsReadAsync(userId, zat, null);
        }
        
        public void MarkAllAsReadAsync(System.Guid userId, string zat, object userState) {
            if ((this.onBeginMarkAllAsReadDelegate == null)) {
                this.onBeginMarkAllAsReadDelegate = new BeginOperationDelegate(this.OnBeginMarkAllAsRead);
            }
            if ((this.onEndMarkAllAsReadDelegate == null)) {
                this.onEndMarkAllAsReadDelegate = new EndOperationDelegate(this.OnEndMarkAllAsRead);
            }
            if ((this.onMarkAllAsReadCompletedDelegate == null)) {
                this.onMarkAllAsReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarkAllAsReadCompleted);
            }
            base.InvokeAsync(this.onBeginMarkAllAsReadDelegate, new object[] {
                        userId,
                        zat}, this.onEndMarkAllAsReadDelegate, this.onMarkAllAsReadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.NotificationService.INotificationService.BeginGetNotifications(System.Guid userId, int take, System.Collections.ObjectModel.ObservableCollection<System.Guid> skip, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNotifications(userId, take, skip, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.Notification> Hangout.Client.NotificationService.INotificationService.EndGetNotifications(System.IAsyncResult result) {
            return base.Channel.EndGetNotifications(result);
        }
        
        private System.IAsyncResult OnBeginGetNotifications(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int take = ((int)(inValues[1]));
            System.Collections.ObjectModel.ObservableCollection<System.Guid> skip = ((System.Collections.ObjectModel.ObservableCollection<System.Guid>)(inValues[2]));
            string zat = ((string)(inValues[3]));
            return ((Hangout.Client.NotificationService.INotificationService)(this)).BeginGetNotifications(userId, take, skip, zat, callback, asyncState);
        }
        
        private object[] OnEndGetNotifications(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.Notification> retVal = ((Hangout.Client.NotificationService.INotificationService)(this)).EndGetNotifications(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNotificationsCompleted(object state) {
            if ((this.GetNotificationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNotificationsCompleted(this, new GetNotificationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNotificationsAsync(System.Guid userId, int take, System.Collections.ObjectModel.ObservableCollection<System.Guid> skip, string zat) {
            this.GetNotificationsAsync(userId, take, skip, zat, null);
        }
        
        public void GetNotificationsAsync(System.Guid userId, int take, System.Collections.ObjectModel.ObservableCollection<System.Guid> skip, string zat, object userState) {
            if ((this.onBeginGetNotificationsDelegate == null)) {
                this.onBeginGetNotificationsDelegate = new BeginOperationDelegate(this.OnBeginGetNotifications);
            }
            if ((this.onEndGetNotificationsDelegate == null)) {
                this.onEndGetNotificationsDelegate = new EndOperationDelegate(this.OnEndGetNotifications);
            }
            if ((this.onGetNotificationsCompletedDelegate == null)) {
                this.onGetNotificationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNotificationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetNotificationsDelegate, new object[] {
                        userId,
                        take,
                        skip,
                        zat}, this.onEndGetNotificationsDelegate, this.onGetNotificationsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.NotificationService.INotificationService.BeginGetNewNotifications(System.Guid userId, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNewNotifications(userId, skipList, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.Notification> Hangout.Client.NotificationService.INotificationService.EndGetNewNotifications(System.IAsyncResult result) {
            return base.Channel.EndGetNewNotifications(result);
        }
        
        private System.IAsyncResult OnBeginGetNewNotifications(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList = ((System.Collections.ObjectModel.ObservableCollection<System.Guid>)(inValues[1]));
            string zat = ((string)(inValues[2]));
            return ((Hangout.Client.NotificationService.INotificationService)(this)).BeginGetNewNotifications(userId, skipList, zat, callback, asyncState);
        }
        
        private object[] OnEndGetNewNotifications(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.Notification> retVal = ((Hangout.Client.NotificationService.INotificationService)(this)).EndGetNewNotifications(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNewNotificationsCompleted(object state) {
            if ((this.GetNewNotificationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNewNotificationsCompleted(this, new GetNewNotificationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNewNotificationsAsync(System.Guid userId, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, string zat) {
            this.GetNewNotificationsAsync(userId, skipList, zat, null);
        }
        
        public void GetNewNotificationsAsync(System.Guid userId, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, string zat, object userState) {
            if ((this.onBeginGetNewNotificationsDelegate == null)) {
                this.onBeginGetNewNotificationsDelegate = new BeginOperationDelegate(this.OnBeginGetNewNotifications);
            }
            if ((this.onEndGetNewNotificationsDelegate == null)) {
                this.onEndGetNewNotificationsDelegate = new EndOperationDelegate(this.OnEndGetNewNotifications);
            }
            if ((this.onGetNewNotificationsCompletedDelegate == null)) {
                this.onGetNewNotificationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNewNotificationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetNewNotificationsDelegate, new object[] {
                        userId,
                        skipList,
                        zat}, this.onEndGetNewNotificationsDelegate, this.onGetNewNotificationsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.NotificationService.INotificationService.BeginGetNotification(System.Guid notificationId, System.Guid userId, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNotification(notificationId, userId, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.NotificationService.Notification Hangout.Client.NotificationService.INotificationService.EndGetNotification(System.IAsyncResult result) {
            return base.Channel.EndGetNotification(result);
        }
        
        private System.IAsyncResult OnBeginGetNotification(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid notificationId = ((System.Guid)(inValues[0]));
            System.Guid userId = ((System.Guid)(inValues[1]));
            string zat = ((string)(inValues[2]));
            return ((Hangout.Client.NotificationService.INotificationService)(this)).BeginGetNotification(notificationId, userId, zat, callback, asyncState);
        }
        
        private object[] OnEndGetNotification(System.IAsyncResult result) {
            Hangout.Client.NotificationService.Notification retVal = ((Hangout.Client.NotificationService.INotificationService)(this)).EndGetNotification(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNotificationCompleted(object state) {
            if ((this.GetNotificationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNotificationCompleted(this, new GetNotificationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNotificationAsync(System.Guid notificationId, System.Guid userId, string zat) {
            this.GetNotificationAsync(notificationId, userId, zat, null);
        }
        
        public void GetNotificationAsync(System.Guid notificationId, System.Guid userId, string zat, object userState) {
            if ((this.onBeginGetNotificationDelegate == null)) {
                this.onBeginGetNotificationDelegate = new BeginOperationDelegate(this.OnBeginGetNotification);
            }
            if ((this.onEndGetNotificationDelegate == null)) {
                this.onEndGetNotificationDelegate = new EndOperationDelegate(this.OnEndGetNotification);
            }
            if ((this.onGetNotificationCompletedDelegate == null)) {
                this.onGetNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNotificationCompleted);
            }
            base.InvokeAsync(this.onBeginGetNotificationDelegate, new object[] {
                        notificationId,
                        userId,
                        zat}, this.onEndGetNotificationDelegate, this.onGetNotificationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.NotificationService.INotificationService.BeginGetLastUnReadNotification(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLastUnReadNotification(userId, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.NotificationService.NotificationData Hangout.Client.NotificationService.INotificationService.EndGetLastUnReadNotification(System.IAsyncResult result) {
            return base.Channel.EndGetLastUnReadNotification(result);
        }
        
        private System.IAsyncResult OnBeginGetLastUnReadNotification(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string zat = ((string)(inValues[1]));
            return ((Hangout.Client.NotificationService.INotificationService)(this)).BeginGetLastUnReadNotification(userId, zat, callback, asyncState);
        }
        
        private object[] OnEndGetLastUnReadNotification(System.IAsyncResult result) {
            Hangout.Client.NotificationService.NotificationData retVal = ((Hangout.Client.NotificationService.INotificationService)(this)).EndGetLastUnReadNotification(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLastUnReadNotificationCompleted(object state) {
            if ((this.GetLastUnReadNotificationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLastUnReadNotificationCompleted(this, new GetLastUnReadNotificationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLastUnReadNotificationAsync(System.Guid userId, string zat) {
            this.GetLastUnReadNotificationAsync(userId, zat, null);
        }
        
        public void GetLastUnReadNotificationAsync(System.Guid userId, string zat, object userState) {
            if ((this.onBeginGetLastUnReadNotificationDelegate == null)) {
                this.onBeginGetLastUnReadNotificationDelegate = new BeginOperationDelegate(this.OnBeginGetLastUnReadNotification);
            }
            if ((this.onEndGetLastUnReadNotificationDelegate == null)) {
                this.onEndGetLastUnReadNotificationDelegate = new EndOperationDelegate(this.OnEndGetLastUnReadNotification);
            }
            if ((this.onGetLastUnReadNotificationCompletedDelegate == null)) {
                this.onGetLastUnReadNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLastUnReadNotificationCompleted);
            }
            base.InvokeAsync(this.onBeginGetLastUnReadNotificationDelegate, new object[] {
                        userId,
                        zat}, this.onEndGetLastUnReadNotificationDelegate, this.onGetLastUnReadNotificationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.NotificationService.INotificationService.BeginGetUnreadNotificationCount(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUnreadNotificationCount(userId, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Hangout.Client.NotificationService.INotificationService.EndGetUnreadNotificationCount(System.IAsyncResult result) {
            return base.Channel.EndGetUnreadNotificationCount(result);
        }
        
        private System.IAsyncResult OnBeginGetUnreadNotificationCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string zat = ((string)(inValues[1]));
            return ((Hangout.Client.NotificationService.INotificationService)(this)).BeginGetUnreadNotificationCount(userId, zat, callback, asyncState);
        }
        
        private object[] OnEndGetUnreadNotificationCount(System.IAsyncResult result) {
            int retVal = ((Hangout.Client.NotificationService.INotificationService)(this)).EndGetUnreadNotificationCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUnreadNotificationCountCompleted(object state) {
            if ((this.GetUnreadNotificationCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUnreadNotificationCountCompleted(this, new GetUnreadNotificationCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUnreadNotificationCountAsync(System.Guid userId, string zat) {
            this.GetUnreadNotificationCountAsync(userId, zat, null);
        }
        
        public void GetUnreadNotificationCountAsync(System.Guid userId, string zat, object userState) {
            if ((this.onBeginGetUnreadNotificationCountDelegate == null)) {
                this.onBeginGetUnreadNotificationCountDelegate = new BeginOperationDelegate(this.OnBeginGetUnreadNotificationCount);
            }
            if ((this.onEndGetUnreadNotificationCountDelegate == null)) {
                this.onEndGetUnreadNotificationCountDelegate = new EndOperationDelegate(this.OnEndGetUnreadNotificationCount);
            }
            if ((this.onGetUnreadNotificationCountCompletedDelegate == null)) {
                this.onGetUnreadNotificationCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUnreadNotificationCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetUnreadNotificationCountDelegate, new object[] {
                        userId,
                        zat}, this.onEndGetUnreadNotificationCountDelegate, this.onGetUnreadNotificationCountCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Hangout.Client.NotificationService.INotificationService CreateChannel() {
            return new NotificationServiceClientChannel(this);
        }
        
        private class NotificationServiceClientChannel : ChannelBase<Hangout.Client.NotificationService.INotificationService>, Hangout.Client.NotificationService.INotificationService {
            
            public NotificationServiceClientChannel(System.ServiceModel.ClientBase<Hangout.Client.NotificationService.INotificationService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginMarkAllAsRead(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = zat;
                System.IAsyncResult _result = base.BeginInvoke("MarkAllAsRead", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.NotificationService.Result EndMarkAllAsRead(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.NotificationService.Result _result = ((Hangout.Client.NotificationService.Result)(base.EndInvoke("MarkAllAsRead", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNotifications(System.Guid userId, int take, System.Collections.ObjectModel.ObservableCollection<System.Guid> skip, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = take;
                _args[2] = skip;
                _args[3] = zat;
                System.IAsyncResult _result = base.BeginInvoke("GetNotifications", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.Notification> EndGetNotifications(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.Notification> _result = ((System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.Notification>)(base.EndInvoke("GetNotifications", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNewNotifications(System.Guid userId, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = skipList;
                _args[2] = zat;
                System.IAsyncResult _result = base.BeginInvoke("GetNewNotifications", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.Notification> EndGetNewNotifications(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.Notification> _result = ((System.Collections.ObjectModel.ObservableCollection<Hangout.Client.NotificationService.Notification>)(base.EndInvoke("GetNewNotifications", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNotification(System.Guid notificationId, System.Guid userId, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = notificationId;
                _args[1] = userId;
                _args[2] = zat;
                System.IAsyncResult _result = base.BeginInvoke("GetNotification", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.NotificationService.Notification EndGetNotification(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.NotificationService.Notification _result = ((Hangout.Client.NotificationService.Notification)(base.EndInvoke("GetNotification", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLastUnReadNotification(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = zat;
                System.IAsyncResult _result = base.BeginInvoke("GetLastUnReadNotification", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.NotificationService.NotificationData EndGetLastUnReadNotification(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.NotificationService.NotificationData _result = ((Hangout.Client.NotificationService.NotificationData)(base.EndInvoke("GetLastUnReadNotification", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUnreadNotificationCount(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = zat;
                System.IAsyncResult _result = base.BeginInvoke("GetUnreadNotificationCount", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetUnreadNotificationCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetUnreadNotificationCount", _args, result)));
                return _result;
            }
        }
    }
}
