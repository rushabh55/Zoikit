//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Hangout.Client.TextService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserText", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Text")]
    public partial class UserText : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text> TextsField;
        
        private Hangout.Client.TextService.CompactUser UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text> Texts {
            get {
                return this.TextsField;
            }
            set {
                if ((object.ReferenceEquals(this.TextsField, value) != true)) {
                    this.TextsField = value;
                    this.RaisePropertyChanged("Texts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Hangout.Client.TextService.CompactUser User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompactUser", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Accounts")]
    public partial class CompactUser : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private string ProfilePicURLField;
        
        private System.Guid UserIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfilePicURL {
            get {
                return this.ProfilePicURLField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfilePicURLField, value) != true)) {
                    this.ProfilePicURLField = value;
                    this.RaisePropertyChanged("ProfilePicURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Text", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Text")]
    public partial class Text : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime DateTimeStampField;
        
        private bool MarkAsReadField;
        
        private System.Guid TextIdField;
        
        private string TextMessageField;
        
        private Hangout.Client.TextService.CompactUser UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTimeStamp {
            get {
                return this.DateTimeStampField;
            }
            set {
                if ((this.DateTimeStampField.Equals(value) != true)) {
                    this.DateTimeStampField = value;
                    this.RaisePropertyChanged("DateTimeStamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MarkAsRead {
            get {
                return this.MarkAsReadField;
            }
            set {
                if ((this.MarkAsReadField.Equals(value) != true)) {
                    this.MarkAsReadField = value;
                    this.RaisePropertyChanged("MarkAsRead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TextId {
            get {
                return this.TextIdField;
            }
            set {
                if ((this.TextIdField.Equals(value) != true)) {
                    this.TextIdField = value;
                    this.RaisePropertyChanged("TextId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TextMessage {
            get {
                return this.TextMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.TextMessageField, value) != true)) {
                    this.TextMessageField = value;
                    this.RaisePropertyChanged("TextMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Hangout.Client.TextService.CompactUser User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextSentStatus", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Core.Text")]
    public enum TextSentStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Saved = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Result", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Service")]
    public enum Result : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TextService.ITextService")]
    public interface ITextService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITextService/GetUserText", ReplyAction="http://tempuri.org/ITextService/GetUserTextResponse")]
        System.IAsyncResult BeginGetUserText(System.Guid fromId, System.Guid toId, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, int take, string zat, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.TextService.UserText EndGetUserText(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITextService/GetText", ReplyAction="http://tempuri.org/ITextService/GetTextResponse")]
        System.IAsyncResult BeginGetText(System.Guid userId, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, int take, string zat, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text> EndGetText(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITextService/SendText", ReplyAction="http://tempuri.org/ITextService/SendTextResponse")]
        System.IAsyncResult BeginSendText(System.Guid fromId, System.Guid toId, string text, string zat, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.TextService.TextSentStatus EndSendText(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITextService/MarkAsRead", ReplyAction="http://tempuri.org/ITextService/MarkAsReadResponse")]
        System.IAsyncResult BeginMarkAsRead(System.Guid fromId, System.Guid toId, string zat, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.TextService.Result EndMarkAsRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITextService/MarkAllAsRead", ReplyAction="http://tempuri.org/ITextService/MarkAllAsReadResponse")]
        System.IAsyncResult BeginMarkAllAsRead(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.TextService.Result EndMarkAllAsRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITextService/GetTextsAfter", ReplyAction="http://tempuri.org/ITextService/GetTextsAfterResponse")]
        System.IAsyncResult BeginGetTextsAfter(System.Guid fromId, System.Guid toId, System.Guid textId, string zat, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text> EndGetTextsAfter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITextService/GetUnreadMessagesCount", ReplyAction="http://tempuri.org/ITextService/GetUnreadMessagesCountResponse")]
        System.IAsyncResult BeginGetUnreadMessagesCount(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState);
        
        int EndGetUnreadMessagesCount(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITextServiceChannel : Hangout.Client.TextService.ITextService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.TextService.UserText Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.TextService.UserText)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.TextService.TextSentStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.TextService.TextSentStatus)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarkAsReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MarkAsReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.TextService.Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.TextService.Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarkAllAsReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MarkAllAsReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.TextService.Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.TextService.Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTextsAfterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTextsAfterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUnreadMessagesCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUnreadMessagesCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TextServiceClient : System.ServiceModel.ClientBase<Hangout.Client.TextService.ITextService>, Hangout.Client.TextService.ITextService {
        
        private BeginOperationDelegate onBeginGetUserTextDelegate;
        
        private EndOperationDelegate onEndGetUserTextDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserTextCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTextDelegate;
        
        private EndOperationDelegate onEndGetTextDelegate;
        
        private System.Threading.SendOrPostCallback onGetTextCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendTextDelegate;
        
        private EndOperationDelegate onEndSendTextDelegate;
        
        private System.Threading.SendOrPostCallback onSendTextCompletedDelegate;
        
        private BeginOperationDelegate onBeginMarkAsReadDelegate;
        
        private EndOperationDelegate onEndMarkAsReadDelegate;
        
        private System.Threading.SendOrPostCallback onMarkAsReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginMarkAllAsReadDelegate;
        
        private EndOperationDelegate onEndMarkAllAsReadDelegate;
        
        private System.Threading.SendOrPostCallback onMarkAllAsReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTextsAfterDelegate;
        
        private EndOperationDelegate onEndGetTextsAfterDelegate;
        
        private System.Threading.SendOrPostCallback onGetTextsAfterCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUnreadMessagesCountDelegate;
        
        private EndOperationDelegate onEndGetUnreadMessagesCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetUnreadMessagesCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TextServiceClient() {
        }
        
        public TextServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TextServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TextServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TextServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetUserTextCompletedEventArgs> GetUserTextCompleted;
        
        public event System.EventHandler<GetTextCompletedEventArgs> GetTextCompleted;
        
        public event System.EventHandler<SendTextCompletedEventArgs> SendTextCompleted;
        
        public event System.EventHandler<MarkAsReadCompletedEventArgs> MarkAsReadCompleted;
        
        public event System.EventHandler<MarkAllAsReadCompletedEventArgs> MarkAllAsReadCompleted;
        
        public event System.EventHandler<GetTextsAfterCompletedEventArgs> GetTextsAfterCompleted;
        
        public event System.EventHandler<GetUnreadMessagesCountCompletedEventArgs> GetUnreadMessagesCountCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.TextService.ITextService.BeginGetUserText(System.Guid fromId, System.Guid toId, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, int take, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserText(fromId, toId, skipList, take, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.TextService.UserText Hangout.Client.TextService.ITextService.EndGetUserText(System.IAsyncResult result) {
            return base.Channel.EndGetUserText(result);
        }
        
        private System.IAsyncResult OnBeginGetUserText(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid fromId = ((System.Guid)(inValues[0]));
            System.Guid toId = ((System.Guid)(inValues[1]));
            System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList = ((System.Collections.ObjectModel.ObservableCollection<System.Guid>)(inValues[2]));
            int take = ((int)(inValues[3]));
            string zat = ((string)(inValues[4]));
            return ((Hangout.Client.TextService.ITextService)(this)).BeginGetUserText(fromId, toId, skipList, take, zat, callback, asyncState);
        }
        
        private object[] OnEndGetUserText(System.IAsyncResult result) {
            Hangout.Client.TextService.UserText retVal = ((Hangout.Client.TextService.ITextService)(this)).EndGetUserText(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserTextCompleted(object state) {
            if ((this.GetUserTextCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserTextCompleted(this, new GetUserTextCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserTextAsync(System.Guid fromId, System.Guid toId, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, int take, string zat) {
            this.GetUserTextAsync(fromId, toId, skipList, take, zat, null);
        }
        
        public void GetUserTextAsync(System.Guid fromId, System.Guid toId, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, int take, string zat, object userState) {
            if ((this.onBeginGetUserTextDelegate == null)) {
                this.onBeginGetUserTextDelegate = new BeginOperationDelegate(this.OnBeginGetUserText);
            }
            if ((this.onEndGetUserTextDelegate == null)) {
                this.onEndGetUserTextDelegate = new EndOperationDelegate(this.OnEndGetUserText);
            }
            if ((this.onGetUserTextCompletedDelegate == null)) {
                this.onGetUserTextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserTextCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserTextDelegate, new object[] {
                        fromId,
                        toId,
                        skipList,
                        take,
                        zat}, this.onEndGetUserTextDelegate, this.onGetUserTextCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.TextService.ITextService.BeginGetText(System.Guid userId, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, int take, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetText(userId, skipList, take, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text> Hangout.Client.TextService.ITextService.EndGetText(System.IAsyncResult result) {
            return base.Channel.EndGetText(result);
        }
        
        private System.IAsyncResult OnBeginGetText(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList = ((System.Collections.ObjectModel.ObservableCollection<System.Guid>)(inValues[1]));
            int take = ((int)(inValues[2]));
            string zat = ((string)(inValues[3]));
            return ((Hangout.Client.TextService.ITextService)(this)).BeginGetText(userId, skipList, take, zat, callback, asyncState);
        }
        
        private object[] OnEndGetText(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text> retVal = ((Hangout.Client.TextService.ITextService)(this)).EndGetText(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTextCompleted(object state) {
            if ((this.GetTextCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTextCompleted(this, new GetTextCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTextAsync(System.Guid userId, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, int take, string zat) {
            this.GetTextAsync(userId, skipList, take, zat, null);
        }
        
        public void GetTextAsync(System.Guid userId, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, int take, string zat, object userState) {
            if ((this.onBeginGetTextDelegate == null)) {
                this.onBeginGetTextDelegate = new BeginOperationDelegate(this.OnBeginGetText);
            }
            if ((this.onEndGetTextDelegate == null)) {
                this.onEndGetTextDelegate = new EndOperationDelegate(this.OnEndGetText);
            }
            if ((this.onGetTextCompletedDelegate == null)) {
                this.onGetTextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTextCompleted);
            }
            base.InvokeAsync(this.onBeginGetTextDelegate, new object[] {
                        userId,
                        skipList,
                        take,
                        zat}, this.onEndGetTextDelegate, this.onGetTextCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.TextService.ITextService.BeginSendText(System.Guid fromId, System.Guid toId, string text, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendText(fromId, toId, text, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.TextService.TextSentStatus Hangout.Client.TextService.ITextService.EndSendText(System.IAsyncResult result) {
            return base.Channel.EndSendText(result);
        }
        
        private System.IAsyncResult OnBeginSendText(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid fromId = ((System.Guid)(inValues[0]));
            System.Guid toId = ((System.Guid)(inValues[1]));
            string text = ((string)(inValues[2]));
            string zat = ((string)(inValues[3]));
            return ((Hangout.Client.TextService.ITextService)(this)).BeginSendText(fromId, toId, text, zat, callback, asyncState);
        }
        
        private object[] OnEndSendText(System.IAsyncResult result) {
            Hangout.Client.TextService.TextSentStatus retVal = ((Hangout.Client.TextService.ITextService)(this)).EndSendText(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendTextCompleted(object state) {
            if ((this.SendTextCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendTextCompleted(this, new SendTextCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendTextAsync(System.Guid fromId, System.Guid toId, string text, string zat) {
            this.SendTextAsync(fromId, toId, text, zat, null);
        }
        
        public void SendTextAsync(System.Guid fromId, System.Guid toId, string text, string zat, object userState) {
            if ((this.onBeginSendTextDelegate == null)) {
                this.onBeginSendTextDelegate = new BeginOperationDelegate(this.OnBeginSendText);
            }
            if ((this.onEndSendTextDelegate == null)) {
                this.onEndSendTextDelegate = new EndOperationDelegate(this.OnEndSendText);
            }
            if ((this.onSendTextCompletedDelegate == null)) {
                this.onSendTextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendTextCompleted);
            }
            base.InvokeAsync(this.onBeginSendTextDelegate, new object[] {
                        fromId,
                        toId,
                        text,
                        zat}, this.onEndSendTextDelegate, this.onSendTextCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.TextService.ITextService.BeginMarkAsRead(System.Guid fromId, System.Guid toId, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMarkAsRead(fromId, toId, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.TextService.Result Hangout.Client.TextService.ITextService.EndMarkAsRead(System.IAsyncResult result) {
            return base.Channel.EndMarkAsRead(result);
        }
        
        private System.IAsyncResult OnBeginMarkAsRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid fromId = ((System.Guid)(inValues[0]));
            System.Guid toId = ((System.Guid)(inValues[1]));
            string zat = ((string)(inValues[2]));
            return ((Hangout.Client.TextService.ITextService)(this)).BeginMarkAsRead(fromId, toId, zat, callback, asyncState);
        }
        
        private object[] OnEndMarkAsRead(System.IAsyncResult result) {
            Hangout.Client.TextService.Result retVal = ((Hangout.Client.TextService.ITextService)(this)).EndMarkAsRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMarkAsReadCompleted(object state) {
            if ((this.MarkAsReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MarkAsReadCompleted(this, new MarkAsReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MarkAsReadAsync(System.Guid fromId, System.Guid toId, string zat) {
            this.MarkAsReadAsync(fromId, toId, zat, null);
        }
        
        public void MarkAsReadAsync(System.Guid fromId, System.Guid toId, string zat, object userState) {
            if ((this.onBeginMarkAsReadDelegate == null)) {
                this.onBeginMarkAsReadDelegate = new BeginOperationDelegate(this.OnBeginMarkAsRead);
            }
            if ((this.onEndMarkAsReadDelegate == null)) {
                this.onEndMarkAsReadDelegate = new EndOperationDelegate(this.OnEndMarkAsRead);
            }
            if ((this.onMarkAsReadCompletedDelegate == null)) {
                this.onMarkAsReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarkAsReadCompleted);
            }
            base.InvokeAsync(this.onBeginMarkAsReadDelegate, new object[] {
                        fromId,
                        toId,
                        zat}, this.onEndMarkAsReadDelegate, this.onMarkAsReadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.TextService.ITextService.BeginMarkAllAsRead(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMarkAllAsRead(userId, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.TextService.Result Hangout.Client.TextService.ITextService.EndMarkAllAsRead(System.IAsyncResult result) {
            return base.Channel.EndMarkAllAsRead(result);
        }
        
        private System.IAsyncResult OnBeginMarkAllAsRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string zat = ((string)(inValues[1]));
            return ((Hangout.Client.TextService.ITextService)(this)).BeginMarkAllAsRead(userId, zat, callback, asyncState);
        }
        
        private object[] OnEndMarkAllAsRead(System.IAsyncResult result) {
            Hangout.Client.TextService.Result retVal = ((Hangout.Client.TextService.ITextService)(this)).EndMarkAllAsRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMarkAllAsReadCompleted(object state) {
            if ((this.MarkAllAsReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MarkAllAsReadCompleted(this, new MarkAllAsReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MarkAllAsReadAsync(System.Guid userId, string zat) {
            this.MarkAllAsReadAsync(userId, zat, null);
        }
        
        public void MarkAllAsReadAsync(System.Guid userId, string zat, object userState) {
            if ((this.onBeginMarkAllAsReadDelegate == null)) {
                this.onBeginMarkAllAsReadDelegate = new BeginOperationDelegate(this.OnBeginMarkAllAsRead);
            }
            if ((this.onEndMarkAllAsReadDelegate == null)) {
                this.onEndMarkAllAsReadDelegate = new EndOperationDelegate(this.OnEndMarkAllAsRead);
            }
            if ((this.onMarkAllAsReadCompletedDelegate == null)) {
                this.onMarkAllAsReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarkAllAsReadCompleted);
            }
            base.InvokeAsync(this.onBeginMarkAllAsReadDelegate, new object[] {
                        userId,
                        zat}, this.onEndMarkAllAsReadDelegate, this.onMarkAllAsReadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.TextService.ITextService.BeginGetTextsAfter(System.Guid fromId, System.Guid toId, System.Guid textId, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTextsAfter(fromId, toId, textId, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text> Hangout.Client.TextService.ITextService.EndGetTextsAfter(System.IAsyncResult result) {
            return base.Channel.EndGetTextsAfter(result);
        }
        
        private System.IAsyncResult OnBeginGetTextsAfter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid fromId = ((System.Guid)(inValues[0]));
            System.Guid toId = ((System.Guid)(inValues[1]));
            System.Guid textId = ((System.Guid)(inValues[2]));
            string zat = ((string)(inValues[3]));
            return ((Hangout.Client.TextService.ITextService)(this)).BeginGetTextsAfter(fromId, toId, textId, zat, callback, asyncState);
        }
        
        private object[] OnEndGetTextsAfter(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text> retVal = ((Hangout.Client.TextService.ITextService)(this)).EndGetTextsAfter(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTextsAfterCompleted(object state) {
            if ((this.GetTextsAfterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTextsAfterCompleted(this, new GetTextsAfterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTextsAfterAsync(System.Guid fromId, System.Guid toId, System.Guid textId, string zat) {
            this.GetTextsAfterAsync(fromId, toId, textId, zat, null);
        }
        
        public void GetTextsAfterAsync(System.Guid fromId, System.Guid toId, System.Guid textId, string zat, object userState) {
            if ((this.onBeginGetTextsAfterDelegate == null)) {
                this.onBeginGetTextsAfterDelegate = new BeginOperationDelegate(this.OnBeginGetTextsAfter);
            }
            if ((this.onEndGetTextsAfterDelegate == null)) {
                this.onEndGetTextsAfterDelegate = new EndOperationDelegate(this.OnEndGetTextsAfter);
            }
            if ((this.onGetTextsAfterCompletedDelegate == null)) {
                this.onGetTextsAfterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTextsAfterCompleted);
            }
            base.InvokeAsync(this.onBeginGetTextsAfterDelegate, new object[] {
                        fromId,
                        toId,
                        textId,
                        zat}, this.onEndGetTextsAfterDelegate, this.onGetTextsAfterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.TextService.ITextService.BeginGetUnreadMessagesCount(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUnreadMessagesCount(userId, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Hangout.Client.TextService.ITextService.EndGetUnreadMessagesCount(System.IAsyncResult result) {
            return base.Channel.EndGetUnreadMessagesCount(result);
        }
        
        private System.IAsyncResult OnBeginGetUnreadMessagesCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string zat = ((string)(inValues[1]));
            return ((Hangout.Client.TextService.ITextService)(this)).BeginGetUnreadMessagesCount(userId, zat, callback, asyncState);
        }
        
        private object[] OnEndGetUnreadMessagesCount(System.IAsyncResult result) {
            int retVal = ((Hangout.Client.TextService.ITextService)(this)).EndGetUnreadMessagesCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUnreadMessagesCountCompleted(object state) {
            if ((this.GetUnreadMessagesCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUnreadMessagesCountCompleted(this, new GetUnreadMessagesCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUnreadMessagesCountAsync(System.Guid userId, string zat) {
            this.GetUnreadMessagesCountAsync(userId, zat, null);
        }
        
        public void GetUnreadMessagesCountAsync(System.Guid userId, string zat, object userState) {
            if ((this.onBeginGetUnreadMessagesCountDelegate == null)) {
                this.onBeginGetUnreadMessagesCountDelegate = new BeginOperationDelegate(this.OnBeginGetUnreadMessagesCount);
            }
            if ((this.onEndGetUnreadMessagesCountDelegate == null)) {
                this.onEndGetUnreadMessagesCountDelegate = new EndOperationDelegate(this.OnEndGetUnreadMessagesCount);
            }
            if ((this.onGetUnreadMessagesCountCompletedDelegate == null)) {
                this.onGetUnreadMessagesCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUnreadMessagesCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetUnreadMessagesCountDelegate, new object[] {
                        userId,
                        zat}, this.onEndGetUnreadMessagesCountDelegate, this.onGetUnreadMessagesCountCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Hangout.Client.TextService.ITextService CreateChannel() {
            return new TextServiceClientChannel(this);
        }
        
        private class TextServiceClientChannel : ChannelBase<Hangout.Client.TextService.ITextService>, Hangout.Client.TextService.ITextService {
            
            public TextServiceClientChannel(System.ServiceModel.ClientBase<Hangout.Client.TextService.ITextService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetUserText(System.Guid fromId, System.Guid toId, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, int take, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = fromId;
                _args[1] = toId;
                _args[2] = skipList;
                _args[3] = take;
                _args[4] = zat;
                System.IAsyncResult _result = base.BeginInvoke("GetUserText", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.TextService.UserText EndGetUserText(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.TextService.UserText _result = ((Hangout.Client.TextService.UserText)(base.EndInvoke("GetUserText", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetText(System.Guid userId, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, int take, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = skipList;
                _args[2] = take;
                _args[3] = zat;
                System.IAsyncResult _result = base.BeginInvoke("GetText", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text> EndGetText(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text> _result = ((System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text>)(base.EndInvoke("GetText", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendText(System.Guid fromId, System.Guid toId, string text, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = fromId;
                _args[1] = toId;
                _args[2] = text;
                _args[3] = zat;
                System.IAsyncResult _result = base.BeginInvoke("SendText", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.TextService.TextSentStatus EndSendText(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.TextService.TextSentStatus _result = ((Hangout.Client.TextService.TextSentStatus)(base.EndInvoke("SendText", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMarkAsRead(System.Guid fromId, System.Guid toId, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = fromId;
                _args[1] = toId;
                _args[2] = zat;
                System.IAsyncResult _result = base.BeginInvoke("MarkAsRead", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.TextService.Result EndMarkAsRead(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.TextService.Result _result = ((Hangout.Client.TextService.Result)(base.EndInvoke("MarkAsRead", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMarkAllAsRead(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = zat;
                System.IAsyncResult _result = base.BeginInvoke("MarkAllAsRead", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.TextService.Result EndMarkAllAsRead(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.TextService.Result _result = ((Hangout.Client.TextService.Result)(base.EndInvoke("MarkAllAsRead", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTextsAfter(System.Guid fromId, System.Guid toId, System.Guid textId, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = fromId;
                _args[1] = toId;
                _args[2] = textId;
                _args[3] = zat;
                System.IAsyncResult _result = base.BeginInvoke("GetTextsAfter", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text> EndGetTextsAfter(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text> _result = ((System.Collections.ObjectModel.ObservableCollection<Hangout.Client.TextService.Text>)(base.EndInvoke("GetTextsAfter", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUnreadMessagesCount(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = zat;
                System.IAsyncResult _result = base.BeginInvoke("GetUnreadMessagesCount", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetUnreadMessagesCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetUnreadMessagesCount", _args, result)));
                return _result;
            }
        }
    }
}
