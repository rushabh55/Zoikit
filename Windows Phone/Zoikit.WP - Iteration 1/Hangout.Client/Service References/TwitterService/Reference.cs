//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Hangout.Client.TwitterService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountStatus", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Core.Accounts")]
    public enum AccountStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Blocked = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Updated = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccountCreated = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Activated = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LoggedIn = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LogInFailed = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlreadyRegistered = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UsernameInvalid = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AppInvalid = 9,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TwitterData", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Accounts")]
    public partial class TwitterData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AboutMeField;
        
        private string AccessTokenField;
        
        private string AccessTokenSecretField;
        
        private System.DateTime DateTimeAddedField;
        
        private System.DateTime DateTimeUpdatedField;
        
        private System.Nullable<int> FollowersCountField;
        
        private System.Nullable<int> FollowingCountField;
        
        private string LinkField;
        
        private string LocationField;
        
        private string ProfilePicURLField;
        
        private string ScreenNameField;
        
        private string TimeZoneField;
        
        private System.Nullable<long> TwitterIDField;
        
        private System.Guid UserIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AboutMe {
            get {
                return this.AboutMeField;
            }
            set {
                if ((object.ReferenceEquals(this.AboutMeField, value) != true)) {
                    this.AboutMeField = value;
                    this.RaisePropertyChanged("AboutMe");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccessToken {
            get {
                return this.AccessTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessTokenField, value) != true)) {
                    this.AccessTokenField = value;
                    this.RaisePropertyChanged("AccessToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccessTokenSecret {
            get {
                return this.AccessTokenSecretField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessTokenSecretField, value) != true)) {
                    this.AccessTokenSecretField = value;
                    this.RaisePropertyChanged("AccessTokenSecret");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTimeAdded {
            get {
                return this.DateTimeAddedField;
            }
            set {
                if ((this.DateTimeAddedField.Equals(value) != true)) {
                    this.DateTimeAddedField = value;
                    this.RaisePropertyChanged("DateTimeAdded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTimeUpdated {
            get {
                return this.DateTimeUpdatedField;
            }
            set {
                if ((this.DateTimeUpdatedField.Equals(value) != true)) {
                    this.DateTimeUpdatedField = value;
                    this.RaisePropertyChanged("DateTimeUpdated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> FollowersCount {
            get {
                return this.FollowersCountField;
            }
            set {
                if ((this.FollowersCountField.Equals(value) != true)) {
                    this.FollowersCountField = value;
                    this.RaisePropertyChanged("FollowersCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> FollowingCount {
            get {
                return this.FollowingCountField;
            }
            set {
                if ((this.FollowingCountField.Equals(value) != true)) {
                    this.FollowingCountField = value;
                    this.RaisePropertyChanged("FollowingCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Link {
            get {
                return this.LinkField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkField, value) != true)) {
                    this.LinkField = value;
                    this.RaisePropertyChanged("Link");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfilePicURL {
            get {
                return this.ProfilePicURLField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfilePicURLField, value) != true)) {
                    this.ProfilePicURLField = value;
                    this.RaisePropertyChanged("ProfilePicURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScreenName {
            get {
                return this.ScreenNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ScreenNameField, value) != true)) {
                    this.ScreenNameField = value;
                    this.RaisePropertyChanged("ScreenName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeZone {
            get {
                return this.TimeZoneField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeZoneField, value) != true)) {
                    this.TimeZoneField = value;
                    this.RaisePropertyChanged("TimeZone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> TwitterID {
            get {
                return this.TwitterIDField;
            }
            set {
                if ((this.TwitterIDField.Equals(value) != true)) {
                    this.TwitterIDField = value;
                    this.RaisePropertyChanged("TwitterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserData", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Accounts")]
    public partial class UserData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<int> AgeField;
        
        private string BioField;
        
        private System.Nullable<System.DateTime> BirthdayField;
        
        private System.Nullable<System.DateTime> DateTimeStampField;
        
        private System.Nullable<System.DateTime> DateTimeUpdatedField;
        
        private string DefaultLengthUnitsField;
        
        private string EmailField;
        
        private string FirstNameField;
        
        private System.Nullable<bool> GenderField;
        
        private string LargeProfilePicURLField;
        
        private string LastNameField;
        
        private string NameField;
        
        private string PhoneField;
        
        private string ProfilePicURLField;
        
        private string RelationshipStatusField;
        
        private System.Nullable<float> TimezoneField;
        
        private System.Guid UserIDField;
        
        private string UsernameField;
        
        private string ZATField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Age {
            get {
                return this.AgeField;
            }
            set {
                if ((this.AgeField.Equals(value) != true)) {
                    this.AgeField = value;
                    this.RaisePropertyChanged("Age");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bio {
            get {
                return this.BioField;
            }
            set {
                if ((object.ReferenceEquals(this.BioField, value) != true)) {
                    this.BioField = value;
                    this.RaisePropertyChanged("Bio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Birthday {
            get {
                return this.BirthdayField;
            }
            set {
                if ((this.BirthdayField.Equals(value) != true)) {
                    this.BirthdayField = value;
                    this.RaisePropertyChanged("Birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateTimeStamp {
            get {
                return this.DateTimeStampField;
            }
            set {
                if ((this.DateTimeStampField.Equals(value) != true)) {
                    this.DateTimeStampField = value;
                    this.RaisePropertyChanged("DateTimeStamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateTimeUpdated {
            get {
                return this.DateTimeUpdatedField;
            }
            set {
                if ((this.DateTimeUpdatedField.Equals(value) != true)) {
                    this.DateTimeUpdatedField = value;
                    this.RaisePropertyChanged("DateTimeUpdated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultLengthUnits {
            get {
                return this.DefaultLengthUnitsField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultLengthUnitsField, value) != true)) {
                    this.DefaultLengthUnitsField = value;
                    this.RaisePropertyChanged("DefaultLengthUnits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((this.GenderField.Equals(value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LargeProfilePicURL {
            get {
                return this.LargeProfilePicURLField;
            }
            set {
                if ((object.ReferenceEquals(this.LargeProfilePicURLField, value) != true)) {
                    this.LargeProfilePicURLField = value;
                    this.RaisePropertyChanged("LargeProfilePicURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfilePicURL {
            get {
                return this.ProfilePicURLField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfilePicURLField, value) != true)) {
                    this.ProfilePicURLField = value;
                    this.RaisePropertyChanged("ProfilePicURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RelationshipStatus {
            get {
                return this.RelationshipStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationshipStatusField, value) != true)) {
                    this.RelationshipStatusField = value;
                    this.RaisePropertyChanged("RelationshipStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<float> Timezone {
            get {
                return this.TimezoneField;
            }
            set {
                if ((this.TimezoneField.Equals(value) != true)) {
                    this.TimezoneField = value;
                    this.RaisePropertyChanged("Timezone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZAT {
            get {
                return this.ZATField;
            }
            set {
                if ((object.ReferenceEquals(this.ZATField, value) != true)) {
                    this.ZATField = value;
                    this.RaisePropertyChanged("ZAT");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TwitterService.ITwitterService")]
    public interface ITwitterService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITwitterService/RegisterUser", ReplyAction="http://tempuri.org/ITwitterService/RegisterUserResponse")]
        System.IAsyncResult BeginRegisterUser(string accesstoken, string accessTokenSecret, string appId, string appToken, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.TwitterService.AccountStatus EndRegisterUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITwitterService/UpdateTwitterData", ReplyAction="http://tempuri.org/ITwitterService/UpdateTwitterDataResponse")]
        System.IAsyncResult BeginUpdateTwitterData(System.Guid userId, string accesstoken, string accessTokenSecret, string zat, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.TwitterService.AccountStatus EndUpdateTwitterData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITwitterService/GetTwitterData", ReplyAction="http://tempuri.org/ITwitterService/GetTwitterDataResponse")]
        System.IAsyncResult BeginGetTwitterData(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.TwitterService.TwitterData EndGetTwitterData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITwitterService/GetUserData", ReplyAction="http://tempuri.org/ITwitterService/GetUserDataResponse")]
        System.IAsyncResult BeginGetUserData(string accesstoken, string accessTokenSecret, string appId, string appToken, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.TwitterService.UserData EndGetUserData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITwitterService/PostTweet", ReplyAction="http://tempuri.org/ITwitterService/PostTweetResponse")]
        System.IAsyncResult BeginPostTweet(string accesstoken, string accessTokenSecret, string tweet, string appId, string appToken, System.AsyncCallback callback, object asyncState);
        
        void EndPostTweet(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITwitterServiceChannel : Hangout.Client.TwitterService.ITwitterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.TwitterService.AccountStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.TwitterService.AccountStatus)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateTwitterDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateTwitterDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.TwitterService.AccountStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.TwitterService.AccountStatus)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTwitterDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTwitterDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.TwitterService.TwitterData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.TwitterService.TwitterData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.TwitterService.UserData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.TwitterService.UserData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TwitterServiceClient : System.ServiceModel.ClientBase<Hangout.Client.TwitterService.ITwitterService>, Hangout.Client.TwitterService.ITwitterService {
        
        private BeginOperationDelegate onBeginRegisterUserDelegate;
        
        private EndOperationDelegate onEndRegisterUserDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTwitterDataDelegate;
        
        private EndOperationDelegate onEndUpdateTwitterDataDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTwitterDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTwitterDataDelegate;
        
        private EndOperationDelegate onEndGetTwitterDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetTwitterDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserDataDelegate;
        
        private EndOperationDelegate onEndGetUserDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostTweetDelegate;
        
        private EndOperationDelegate onEndPostTweetDelegate;
        
        private System.Threading.SendOrPostCallback onPostTweetCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TwitterServiceClient() {
        }
        
        public TwitterServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TwitterServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TwitterServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TwitterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<RegisterUserCompletedEventArgs> RegisterUserCompleted;
        
        public event System.EventHandler<UpdateTwitterDataCompletedEventArgs> UpdateTwitterDataCompleted;
        
        public event System.EventHandler<GetTwitterDataCompletedEventArgs> GetTwitterDataCompleted;
        
        public event System.EventHandler<GetUserDataCompletedEventArgs> GetUserDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PostTweetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.TwitterService.ITwitterService.BeginRegisterUser(string accesstoken, string accessTokenSecret, string appId, string appToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterUser(accesstoken, accessTokenSecret, appId, appToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.TwitterService.AccountStatus Hangout.Client.TwitterService.ITwitterService.EndRegisterUser(System.IAsyncResult result) {
            return base.Channel.EndRegisterUser(result);
        }
        
        private System.IAsyncResult OnBeginRegisterUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accesstoken = ((string)(inValues[0]));
            string accessTokenSecret = ((string)(inValues[1]));
            string appId = ((string)(inValues[2]));
            string appToken = ((string)(inValues[3]));
            return ((Hangout.Client.TwitterService.ITwitterService)(this)).BeginRegisterUser(accesstoken, accessTokenSecret, appId, appToken, callback, asyncState);
        }
        
        private object[] OnEndRegisterUser(System.IAsyncResult result) {
            Hangout.Client.TwitterService.AccountStatus retVal = ((Hangout.Client.TwitterService.ITwitterService)(this)).EndRegisterUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterUserCompleted(object state) {
            if ((this.RegisterUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterUserCompleted(this, new RegisterUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterUserAsync(string accesstoken, string accessTokenSecret, string appId, string appToken) {
            this.RegisterUserAsync(accesstoken, accessTokenSecret, appId, appToken, null);
        }
        
        public void RegisterUserAsync(string accesstoken, string accessTokenSecret, string appId, string appToken, object userState) {
            if ((this.onBeginRegisterUserDelegate == null)) {
                this.onBeginRegisterUserDelegate = new BeginOperationDelegate(this.OnBeginRegisterUser);
            }
            if ((this.onEndRegisterUserDelegate == null)) {
                this.onEndRegisterUserDelegate = new EndOperationDelegate(this.OnEndRegisterUser);
            }
            if ((this.onRegisterUserCompletedDelegate == null)) {
                this.onRegisterUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterUserCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterUserDelegate, new object[] {
                        accesstoken,
                        accessTokenSecret,
                        appId,
                        appToken}, this.onEndRegisterUserDelegate, this.onRegisterUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.TwitterService.ITwitterService.BeginUpdateTwitterData(System.Guid userId, string accesstoken, string accessTokenSecret, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTwitterData(userId, accesstoken, accessTokenSecret, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.TwitterService.AccountStatus Hangout.Client.TwitterService.ITwitterService.EndUpdateTwitterData(System.IAsyncResult result) {
            return base.Channel.EndUpdateTwitterData(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTwitterData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string accesstoken = ((string)(inValues[1]));
            string accessTokenSecret = ((string)(inValues[2]));
            string zat = ((string)(inValues[3]));
            return ((Hangout.Client.TwitterService.ITwitterService)(this)).BeginUpdateTwitterData(userId, accesstoken, accessTokenSecret, zat, callback, asyncState);
        }
        
        private object[] OnEndUpdateTwitterData(System.IAsyncResult result) {
            Hangout.Client.TwitterService.AccountStatus retVal = ((Hangout.Client.TwitterService.ITwitterService)(this)).EndUpdateTwitterData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateTwitterDataCompleted(object state) {
            if ((this.UpdateTwitterDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTwitterDataCompleted(this, new UpdateTwitterDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTwitterDataAsync(System.Guid userId, string accesstoken, string accessTokenSecret, string zat) {
            this.UpdateTwitterDataAsync(userId, accesstoken, accessTokenSecret, zat, null);
        }
        
        public void UpdateTwitterDataAsync(System.Guid userId, string accesstoken, string accessTokenSecret, string zat, object userState) {
            if ((this.onBeginUpdateTwitterDataDelegate == null)) {
                this.onBeginUpdateTwitterDataDelegate = new BeginOperationDelegate(this.OnBeginUpdateTwitterData);
            }
            if ((this.onEndUpdateTwitterDataDelegate == null)) {
                this.onEndUpdateTwitterDataDelegate = new EndOperationDelegate(this.OnEndUpdateTwitterData);
            }
            if ((this.onUpdateTwitterDataCompletedDelegate == null)) {
                this.onUpdateTwitterDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTwitterDataCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTwitterDataDelegate, new object[] {
                        userId,
                        accesstoken,
                        accessTokenSecret,
                        zat}, this.onEndUpdateTwitterDataDelegate, this.onUpdateTwitterDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.TwitterService.ITwitterService.BeginGetTwitterData(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTwitterData(userId, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.TwitterService.TwitterData Hangout.Client.TwitterService.ITwitterService.EndGetTwitterData(System.IAsyncResult result) {
            return base.Channel.EndGetTwitterData(result);
        }
        
        private System.IAsyncResult OnBeginGetTwitterData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string zat = ((string)(inValues[1]));
            return ((Hangout.Client.TwitterService.ITwitterService)(this)).BeginGetTwitterData(userId, zat, callback, asyncState);
        }
        
        private object[] OnEndGetTwitterData(System.IAsyncResult result) {
            Hangout.Client.TwitterService.TwitterData retVal = ((Hangout.Client.TwitterService.ITwitterService)(this)).EndGetTwitterData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTwitterDataCompleted(object state) {
            if ((this.GetTwitterDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTwitterDataCompleted(this, new GetTwitterDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTwitterDataAsync(System.Guid userId, string zat) {
            this.GetTwitterDataAsync(userId, zat, null);
        }
        
        public void GetTwitterDataAsync(System.Guid userId, string zat, object userState) {
            if ((this.onBeginGetTwitterDataDelegate == null)) {
                this.onBeginGetTwitterDataDelegate = new BeginOperationDelegate(this.OnBeginGetTwitterData);
            }
            if ((this.onEndGetTwitterDataDelegate == null)) {
                this.onEndGetTwitterDataDelegate = new EndOperationDelegate(this.OnEndGetTwitterData);
            }
            if ((this.onGetTwitterDataCompletedDelegate == null)) {
                this.onGetTwitterDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTwitterDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetTwitterDataDelegate, new object[] {
                        userId,
                        zat}, this.onEndGetTwitterDataDelegate, this.onGetTwitterDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.TwitterService.ITwitterService.BeginGetUserData(string accesstoken, string accessTokenSecret, string appId, string appToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserData(accesstoken, accessTokenSecret, appId, appToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.TwitterService.UserData Hangout.Client.TwitterService.ITwitterService.EndGetUserData(System.IAsyncResult result) {
            return base.Channel.EndGetUserData(result);
        }
        
        private System.IAsyncResult OnBeginGetUserData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accesstoken = ((string)(inValues[0]));
            string accessTokenSecret = ((string)(inValues[1]));
            string appId = ((string)(inValues[2]));
            string appToken = ((string)(inValues[3]));
            return ((Hangout.Client.TwitterService.ITwitterService)(this)).BeginGetUserData(accesstoken, accessTokenSecret, appId, appToken, callback, asyncState);
        }
        
        private object[] OnEndGetUserData(System.IAsyncResult result) {
            Hangout.Client.TwitterService.UserData retVal = ((Hangout.Client.TwitterService.ITwitterService)(this)).EndGetUserData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserDataCompleted(object state) {
            if ((this.GetUserDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserDataCompleted(this, new GetUserDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserDataAsync(string accesstoken, string accessTokenSecret, string appId, string appToken) {
            this.GetUserDataAsync(accesstoken, accessTokenSecret, appId, appToken, null);
        }
        
        public void GetUserDataAsync(string accesstoken, string accessTokenSecret, string appId, string appToken, object userState) {
            if ((this.onBeginGetUserDataDelegate == null)) {
                this.onBeginGetUserDataDelegate = new BeginOperationDelegate(this.OnBeginGetUserData);
            }
            if ((this.onEndGetUserDataDelegate == null)) {
                this.onEndGetUserDataDelegate = new EndOperationDelegate(this.OnEndGetUserData);
            }
            if ((this.onGetUserDataCompletedDelegate == null)) {
                this.onGetUserDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserDataDelegate, new object[] {
                        accesstoken,
                        accessTokenSecret,
                        appId,
                        appToken}, this.onEndGetUserDataDelegate, this.onGetUserDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.TwitterService.ITwitterService.BeginPostTweet(string accesstoken, string accessTokenSecret, string tweet, string appId, string appToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostTweet(accesstoken, accessTokenSecret, tweet, appId, appToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Hangout.Client.TwitterService.ITwitterService.EndPostTweet(System.IAsyncResult result) {
            base.Channel.EndPostTweet(result);
        }
        
        private System.IAsyncResult OnBeginPostTweet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accesstoken = ((string)(inValues[0]));
            string accessTokenSecret = ((string)(inValues[1]));
            string tweet = ((string)(inValues[2]));
            string appId = ((string)(inValues[3]));
            string appToken = ((string)(inValues[4]));
            return ((Hangout.Client.TwitterService.ITwitterService)(this)).BeginPostTweet(accesstoken, accessTokenSecret, tweet, appId, appToken, callback, asyncState);
        }
        
        private object[] OnEndPostTweet(System.IAsyncResult result) {
            ((Hangout.Client.TwitterService.ITwitterService)(this)).EndPostTweet(result);
            return null;
        }
        
        private void OnPostTweetCompleted(object state) {
            if ((this.PostTweetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostTweetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostTweetAsync(string accesstoken, string accessTokenSecret, string tweet, string appId, string appToken) {
            this.PostTweetAsync(accesstoken, accessTokenSecret, tweet, appId, appToken, null);
        }
        
        public void PostTweetAsync(string accesstoken, string accessTokenSecret, string tweet, string appId, string appToken, object userState) {
            if ((this.onBeginPostTweetDelegate == null)) {
                this.onBeginPostTweetDelegate = new BeginOperationDelegate(this.OnBeginPostTweet);
            }
            if ((this.onEndPostTweetDelegate == null)) {
                this.onEndPostTweetDelegate = new EndOperationDelegate(this.OnEndPostTweet);
            }
            if ((this.onPostTweetCompletedDelegate == null)) {
                this.onPostTweetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostTweetCompleted);
            }
            base.InvokeAsync(this.onBeginPostTweetDelegate, new object[] {
                        accesstoken,
                        accessTokenSecret,
                        tweet,
                        appId,
                        appToken}, this.onEndPostTweetDelegate, this.onPostTweetCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Hangout.Client.TwitterService.ITwitterService CreateChannel() {
            return new TwitterServiceClientChannel(this);
        }
        
        private class TwitterServiceClientChannel : ChannelBase<Hangout.Client.TwitterService.ITwitterService>, Hangout.Client.TwitterService.ITwitterService {
            
            public TwitterServiceClientChannel(System.ServiceModel.ClientBase<Hangout.Client.TwitterService.ITwitterService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRegisterUser(string accesstoken, string accessTokenSecret, string appId, string appToken, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = accesstoken;
                _args[1] = accessTokenSecret;
                _args[2] = appId;
                _args[3] = appToken;
                System.IAsyncResult _result = base.BeginInvoke("RegisterUser", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.TwitterService.AccountStatus EndRegisterUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.TwitterService.AccountStatus _result = ((Hangout.Client.TwitterService.AccountStatus)(base.EndInvoke("RegisterUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateTwitterData(System.Guid userId, string accesstoken, string accessTokenSecret, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = accesstoken;
                _args[2] = accessTokenSecret;
                _args[3] = zat;
                System.IAsyncResult _result = base.BeginInvoke("UpdateTwitterData", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.TwitterService.AccountStatus EndUpdateTwitterData(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.TwitterService.AccountStatus _result = ((Hangout.Client.TwitterService.AccountStatus)(base.EndInvoke("UpdateTwitterData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTwitterData(System.Guid userId, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = zat;
                System.IAsyncResult _result = base.BeginInvoke("GetTwitterData", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.TwitterService.TwitterData EndGetTwitterData(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.TwitterService.TwitterData _result = ((Hangout.Client.TwitterService.TwitterData)(base.EndInvoke("GetTwitterData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserData(string accesstoken, string accessTokenSecret, string appId, string appToken, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = accesstoken;
                _args[1] = accessTokenSecret;
                _args[2] = appId;
                _args[3] = appToken;
                System.IAsyncResult _result = base.BeginInvoke("GetUserData", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.TwitterService.UserData EndGetUserData(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.TwitterService.UserData _result = ((Hangout.Client.TwitterService.UserData)(base.EndInvoke("GetUserData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPostTweet(string accesstoken, string accessTokenSecret, string tweet, string appId, string appToken, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = accesstoken;
                _args[1] = accessTokenSecret;
                _args[2] = tweet;
                _args[3] = appId;
                _args[4] = appToken;
                System.IAsyncResult _result = base.BeginInvoke("PostTweet", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPostTweet(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PostTweet", _args, result);
            }
        }
    }
}
