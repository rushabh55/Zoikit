//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Hangout.Client.DiscoverService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DiscoverObj", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Discover")]
    public partial class DiscoverObj : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Hangout.Client.DiscoverService.UserTag TagField;
        
        private Hangout.Client.DiscoverService.User UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Hangout.Client.DiscoverService.UserTag Tag {
            get {
                return this.TagField;
            }
            set {
                if ((object.ReferenceEquals(this.TagField, value) != true)) {
                    this.TagField = value;
                    this.RaisePropertyChanged("Tag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Hangout.Client.DiscoverService.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserTag", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Tag")]
    public partial class UserTag : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool FollowingField;
        
        private int NoOfLocalPeopleFollowingField;
        
        private Hangout.Client.DiscoverService.Tag TagField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Following {
            get {
                return this.FollowingField;
            }
            set {
                if ((this.FollowingField.Equals(value) != true)) {
                    this.FollowingField = value;
                    this.RaisePropertyChanged("Following");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoOfLocalPeopleFollowing {
            get {
                return this.NoOfLocalPeopleFollowingField;
            }
            set {
                if ((this.NoOfLocalPeopleFollowingField.Equals(value) != true)) {
                    this.NoOfLocalPeopleFollowingField = value;
                    this.RaisePropertyChanged("NoOfLocalPeopleFollowing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Hangout.Client.DiscoverService.Tag Tag {
            get {
                return this.TagField;
            }
            set {
                if ((object.ReferenceEquals(this.TagField, value) != true)) {
                    this.TagField = value;
                    this.RaisePropertyChanged("Tag");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Accounts")]
    public partial class User : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AboutUsField;
        
        private int CommonItemsField;
        
        private bool IsFollowingField;
        
        private string NameField;
        
        private string ProfilePicURLField;
        
        private System.Guid UserIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AboutUs {
            get {
                return this.AboutUsField;
            }
            set {
                if ((object.ReferenceEquals(this.AboutUsField, value) != true)) {
                    this.AboutUsField = value;
                    this.RaisePropertyChanged("AboutUs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CommonItems {
            get {
                return this.CommonItemsField;
            }
            set {
                if ((this.CommonItemsField.Equals(value) != true)) {
                    this.CommonItemsField = value;
                    this.RaisePropertyChanged("CommonItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFollowing {
            get {
                return this.IsFollowingField;
            }
            set {
                if ((this.IsFollowingField.Equals(value) != true)) {
                    this.IsFollowingField = value;
                    this.RaisePropertyChanged("IsFollowing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfilePicURL {
            get {
                return this.ProfilePicURLField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfilePicURLField, value) != true)) {
                    this.ProfilePicURLField = value;
                    this.RaisePropertyChanged("ProfilePicURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Tag")]
    public partial class Tag : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DiscoverService.IDiscoverService")]
    public interface IDiscoverService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDiscoverService/GetItems", ReplyAction="http://tempuri.org/IDiscoverService/GetItemsResponse")]
        System.IAsyncResult BeginGetItems(System.Guid userId, int take, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, System.Guid cityId, string zat, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Hangout.Client.DiscoverService.DiscoverObj> EndGetItems(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDiscoverServiceChannel : Hangout.Client.DiscoverService.IDiscoverService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Hangout.Client.DiscoverService.DiscoverObj> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Hangout.Client.DiscoverService.DiscoverObj>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DiscoverServiceClient : System.ServiceModel.ClientBase<Hangout.Client.DiscoverService.IDiscoverService>, Hangout.Client.DiscoverService.IDiscoverService {
        
        private BeginOperationDelegate onBeginGetItemsDelegate;
        
        private EndOperationDelegate onEndGetItemsDelegate;
        
        private System.Threading.SendOrPostCallback onGetItemsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DiscoverServiceClient() {
        }
        
        public DiscoverServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DiscoverServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiscoverServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiscoverServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetItemsCompletedEventArgs> GetItemsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.DiscoverService.IDiscoverService.BeginGetItems(System.Guid userId, int take, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, System.Guid cityId, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetItems(userId, take, skipList, cityId, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Hangout.Client.DiscoverService.DiscoverObj> Hangout.Client.DiscoverService.IDiscoverService.EndGetItems(System.IAsyncResult result) {
            return base.Channel.EndGetItems(result);
        }
        
        private System.IAsyncResult OnBeginGetItems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int take = ((int)(inValues[1]));
            System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList = ((System.Collections.ObjectModel.ObservableCollection<System.Guid>)(inValues[2]));
            System.Guid cityId = ((System.Guid)(inValues[3]));
            string zat = ((string)(inValues[4]));
            return ((Hangout.Client.DiscoverService.IDiscoverService)(this)).BeginGetItems(userId, take, skipList, cityId, zat, callback, asyncState);
        }
        
        private object[] OnEndGetItems(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Hangout.Client.DiscoverService.DiscoverObj> retVal = ((Hangout.Client.DiscoverService.IDiscoverService)(this)).EndGetItems(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetItemsCompleted(object state) {
            if ((this.GetItemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetItemsCompleted(this, new GetItemsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetItemsAsync(System.Guid userId, int take, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, System.Guid cityId, string zat) {
            this.GetItemsAsync(userId, take, skipList, cityId, zat, null);
        }
        
        public void GetItemsAsync(System.Guid userId, int take, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, System.Guid cityId, string zat, object userState) {
            if ((this.onBeginGetItemsDelegate == null)) {
                this.onBeginGetItemsDelegate = new BeginOperationDelegate(this.OnBeginGetItems);
            }
            if ((this.onEndGetItemsDelegate == null)) {
                this.onEndGetItemsDelegate = new EndOperationDelegate(this.OnEndGetItems);
            }
            if ((this.onGetItemsCompletedDelegate == null)) {
                this.onGetItemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetItemsCompleted);
            }
            base.InvokeAsync(this.onBeginGetItemsDelegate, new object[] {
                        userId,
                        take,
                        skipList,
                        cityId,
                        zat}, this.onEndGetItemsDelegate, this.onGetItemsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Hangout.Client.DiscoverService.IDiscoverService CreateChannel() {
            return new DiscoverServiceClientChannel(this);
        }
        
        private class DiscoverServiceClientChannel : ChannelBase<Hangout.Client.DiscoverService.IDiscoverService>, Hangout.Client.DiscoverService.IDiscoverService {
            
            public DiscoverServiceClientChannel(System.ServiceModel.ClientBase<Hangout.Client.DiscoverService.IDiscoverService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetItems(System.Guid userId, int take, System.Collections.ObjectModel.ObservableCollection<System.Guid> skipList, System.Guid cityId, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = userId;
                _args[1] = take;
                _args[2] = skipList;
                _args[3] = cityId;
                _args[4] = zat;
                System.IAsyncResult _result = base.BeginInvoke("GetItems", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Hangout.Client.DiscoverService.DiscoverObj> EndGetItems(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Hangout.Client.DiscoverService.DiscoverObj> _result = ((System.Collections.ObjectModel.ObservableCollection<Hangout.Client.DiscoverService.DiscoverObj>)(base.EndInvoke("GetItems", _args, result)));
                return _result;
            }
        }
    }
}
