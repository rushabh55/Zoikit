//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Hangout.Client.TagService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserTag", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Tag")]
    public partial class UserTag : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool FollowingField;
        
        private int NoOfLocalPeopleFollowingField;
        
        private Hangout.Client.TagService.Tag TagField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Following {
            get {
                return this.FollowingField;
            }
            set {
                if ((this.FollowingField.Equals(value) != true)) {
                    this.FollowingField = value;
                    this.RaisePropertyChanged("Following");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoOfLocalPeopleFollowing {
            get {
                return this.NoOfLocalPeopleFollowingField;
            }
            set {
                if ((this.NoOfLocalPeopleFollowingField.Equals(value) != true)) {
                    this.NoOfLocalPeopleFollowingField = value;
                    this.RaisePropertyChanged("NoOfLocalPeopleFollowing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Hangout.Client.TagService.Tag Tag {
            get {
                return this.TagField;
            }
            set {
                if ((object.ReferenceEquals(this.TagField, value) != true)) {
                    this.TagField = value;
                    this.RaisePropertyChanged("Tag");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Tag")]
    public partial class Tag : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FollowResult", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Core.Follow")]
    public enum FollowResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Following = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unfollowed = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlreadyFollowing = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlreadyUnfollowing = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TagService.ITagService")]
    public interface ITagService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITagService/GetTagByName", ReplyAction="http://tempuri.org/ITagService/GetTagByNameResponse")]
        System.IAsyncResult BeginGetTagByName(System.Guid userId, string name, System.Guid cityId, string zat, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.TagService.UserTag EndGetTagByName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITagService/FollowTag", ReplyAction="http://tempuri.org/ITagService/FollowTagResponse")]
        System.IAsyncResult BeginFollowTag(System.Guid userId, System.Guid tokenId, System.Guid cityId, string zat, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.TagService.FollowResult EndFollowTag(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITagService/UnfollowTag", ReplyAction="http://tempuri.org/ITagService/UnfollowTagResponse")]
        System.IAsyncResult BeginUnfollowTag(System.Guid userId, System.Guid tokenId, System.Guid cityId, string zat, System.AsyncCallback callback, object asyncState);
        
        Hangout.Client.TagService.FollowResult EndUnfollowTag(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITagServiceChannel : Hangout.Client.TagService.ITagService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.TagService.UserTag Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.TagService.UserTag)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FollowTagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FollowTagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.TagService.FollowResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.TagService.FollowResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UnfollowTagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UnfollowTagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Hangout.Client.TagService.FollowResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Hangout.Client.TagService.FollowResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TagServiceClient : System.ServiceModel.ClientBase<Hangout.Client.TagService.ITagService>, Hangout.Client.TagService.ITagService {
        
        private BeginOperationDelegate onBeginGetTagByNameDelegate;
        
        private EndOperationDelegate onEndGetTagByNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagByNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginFollowTagDelegate;
        
        private EndOperationDelegate onEndFollowTagDelegate;
        
        private System.Threading.SendOrPostCallback onFollowTagCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnfollowTagDelegate;
        
        private EndOperationDelegate onEndUnfollowTagDelegate;
        
        private System.Threading.SendOrPostCallback onUnfollowTagCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TagServiceClient() {
        }
        
        public TagServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TagServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TagServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TagServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetTagByNameCompletedEventArgs> GetTagByNameCompleted;
        
        public event System.EventHandler<FollowTagCompletedEventArgs> FollowTagCompleted;
        
        public event System.EventHandler<UnfollowTagCompletedEventArgs> UnfollowTagCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.TagService.ITagService.BeginGetTagByName(System.Guid userId, string name, System.Guid cityId, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagByName(userId, name, cityId, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.TagService.UserTag Hangout.Client.TagService.ITagService.EndGetTagByName(System.IAsyncResult result) {
            return base.Channel.EndGetTagByName(result);
        }
        
        private System.IAsyncResult OnBeginGetTagByName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            System.Guid cityId = ((System.Guid)(inValues[2]));
            string zat = ((string)(inValues[3]));
            return ((Hangout.Client.TagService.ITagService)(this)).BeginGetTagByName(userId, name, cityId, zat, callback, asyncState);
        }
        
        private object[] OnEndGetTagByName(System.IAsyncResult result) {
            Hangout.Client.TagService.UserTag retVal = ((Hangout.Client.TagService.ITagService)(this)).EndGetTagByName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTagByNameCompleted(object state) {
            if ((this.GetTagByNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagByNameCompleted(this, new GetTagByNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagByNameAsync(System.Guid userId, string name, System.Guid cityId, string zat) {
            this.GetTagByNameAsync(userId, name, cityId, zat, null);
        }
        
        public void GetTagByNameAsync(System.Guid userId, string name, System.Guid cityId, string zat, object userState) {
            if ((this.onBeginGetTagByNameDelegate == null)) {
                this.onBeginGetTagByNameDelegate = new BeginOperationDelegate(this.OnBeginGetTagByName);
            }
            if ((this.onEndGetTagByNameDelegate == null)) {
                this.onEndGetTagByNameDelegate = new EndOperationDelegate(this.OnEndGetTagByName);
            }
            if ((this.onGetTagByNameCompletedDelegate == null)) {
                this.onGetTagByNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagByNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagByNameDelegate, new object[] {
                        userId,
                        name,
                        cityId,
                        zat}, this.onEndGetTagByNameDelegate, this.onGetTagByNameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.TagService.ITagService.BeginFollowTag(System.Guid userId, System.Guid tokenId, System.Guid cityId, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFollowTag(userId, tokenId, cityId, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.TagService.FollowResult Hangout.Client.TagService.ITagService.EndFollowTag(System.IAsyncResult result) {
            return base.Channel.EndFollowTag(result);
        }
        
        private System.IAsyncResult OnBeginFollowTag(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            System.Guid tokenId = ((System.Guid)(inValues[1]));
            System.Guid cityId = ((System.Guid)(inValues[2]));
            string zat = ((string)(inValues[3]));
            return ((Hangout.Client.TagService.ITagService)(this)).BeginFollowTag(userId, tokenId, cityId, zat, callback, asyncState);
        }
        
        private object[] OnEndFollowTag(System.IAsyncResult result) {
            Hangout.Client.TagService.FollowResult retVal = ((Hangout.Client.TagService.ITagService)(this)).EndFollowTag(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFollowTagCompleted(object state) {
            if ((this.FollowTagCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FollowTagCompleted(this, new FollowTagCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FollowTagAsync(System.Guid userId, System.Guid tokenId, System.Guid cityId, string zat) {
            this.FollowTagAsync(userId, tokenId, cityId, zat, null);
        }
        
        public void FollowTagAsync(System.Guid userId, System.Guid tokenId, System.Guid cityId, string zat, object userState) {
            if ((this.onBeginFollowTagDelegate == null)) {
                this.onBeginFollowTagDelegate = new BeginOperationDelegate(this.OnBeginFollowTag);
            }
            if ((this.onEndFollowTagDelegate == null)) {
                this.onEndFollowTagDelegate = new EndOperationDelegate(this.OnEndFollowTag);
            }
            if ((this.onFollowTagCompletedDelegate == null)) {
                this.onFollowTagCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFollowTagCompleted);
            }
            base.InvokeAsync(this.onBeginFollowTagDelegate, new object[] {
                        userId,
                        tokenId,
                        cityId,
                        zat}, this.onEndFollowTagDelegate, this.onFollowTagCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Hangout.Client.TagService.ITagService.BeginUnfollowTag(System.Guid userId, System.Guid tokenId, System.Guid cityId, string zat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnfollowTag(userId, tokenId, cityId, zat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Hangout.Client.TagService.FollowResult Hangout.Client.TagService.ITagService.EndUnfollowTag(System.IAsyncResult result) {
            return base.Channel.EndUnfollowTag(result);
        }
        
        private System.IAsyncResult OnBeginUnfollowTag(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            System.Guid tokenId = ((System.Guid)(inValues[1]));
            System.Guid cityId = ((System.Guid)(inValues[2]));
            string zat = ((string)(inValues[3]));
            return ((Hangout.Client.TagService.ITagService)(this)).BeginUnfollowTag(userId, tokenId, cityId, zat, callback, asyncState);
        }
        
        private object[] OnEndUnfollowTag(System.IAsyncResult result) {
            Hangout.Client.TagService.FollowResult retVal = ((Hangout.Client.TagService.ITagService)(this)).EndUnfollowTag(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUnfollowTagCompleted(object state) {
            if ((this.UnfollowTagCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnfollowTagCompleted(this, new UnfollowTagCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnfollowTagAsync(System.Guid userId, System.Guid tokenId, System.Guid cityId, string zat) {
            this.UnfollowTagAsync(userId, tokenId, cityId, zat, null);
        }
        
        public void UnfollowTagAsync(System.Guid userId, System.Guid tokenId, System.Guid cityId, string zat, object userState) {
            if ((this.onBeginUnfollowTagDelegate == null)) {
                this.onBeginUnfollowTagDelegate = new BeginOperationDelegate(this.OnBeginUnfollowTag);
            }
            if ((this.onEndUnfollowTagDelegate == null)) {
                this.onEndUnfollowTagDelegate = new EndOperationDelegate(this.OnEndUnfollowTag);
            }
            if ((this.onUnfollowTagCompletedDelegate == null)) {
                this.onUnfollowTagCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnfollowTagCompleted);
            }
            base.InvokeAsync(this.onBeginUnfollowTagDelegate, new object[] {
                        userId,
                        tokenId,
                        cityId,
                        zat}, this.onEndUnfollowTagDelegate, this.onUnfollowTagCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Hangout.Client.TagService.ITagService CreateChannel() {
            return new TagServiceClientChannel(this);
        }
        
        private class TagServiceClientChannel : ChannelBase<Hangout.Client.TagService.ITagService>, Hangout.Client.TagService.ITagService {
            
            public TagServiceClientChannel(System.ServiceModel.ClientBase<Hangout.Client.TagService.ITagService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetTagByName(System.Guid userId, string name, System.Guid cityId, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = name;
                _args[2] = cityId;
                _args[3] = zat;
                System.IAsyncResult _result = base.BeginInvoke("GetTagByName", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.TagService.UserTag EndGetTagByName(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.TagService.UserTag _result = ((Hangout.Client.TagService.UserTag)(base.EndInvoke("GetTagByName", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFollowTag(System.Guid userId, System.Guid tokenId, System.Guid cityId, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = tokenId;
                _args[2] = cityId;
                _args[3] = zat;
                System.IAsyncResult _result = base.BeginInvoke("FollowTag", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.TagService.FollowResult EndFollowTag(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.TagService.FollowResult _result = ((Hangout.Client.TagService.FollowResult)(base.EndInvoke("FollowTag", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUnfollowTag(System.Guid userId, System.Guid tokenId, System.Guid cityId, string zat, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = tokenId;
                _args[2] = cityId;
                _args[3] = zat;
                System.IAsyncResult _result = base.BeginInvoke("UnfollowTag", _args, callback, asyncState);
                return _result;
            }
            
            public Hangout.Client.TagService.FollowResult EndUnfollowTag(System.IAsyncResult result) {
                object[] _args = new object[0];
                Hangout.Client.TagService.FollowResult _result = ((Hangout.Client.TagService.FollowResult)(base.EndInvoke("UnfollowTag", _args, result)));
                return _result;
            }
        }
    }
}
