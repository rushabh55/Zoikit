//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NotificationTest.TokenService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserToken", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Token")]
    [System.SerializableAttribute()]
    public partial class UserToken : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FollowingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoOfPeopleFollowingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NotificationTest.TokenService.Token TokenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Following {
            get {
                return this.FollowingField;
            }
            set {
                if ((this.FollowingField.Equals(value) != true)) {
                    this.FollowingField = value;
                    this.RaisePropertyChanged("Following");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoOfPeopleFollowing {
            get {
                return this.NoOfPeopleFollowingField;
            }
            set {
                if ((this.NoOfPeopleFollowingField.Equals(value) != true)) {
                    this.NoOfPeopleFollowingField = value;
                    this.RaisePropertyChanged("NoOfPeopleFollowing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NotificationTest.TokenService.Token Token {
            get {
                return this.TokenField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenField, value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Token", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Token")]
    [System.SerializableAttribute()]
    public partial class Token : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FollowResult", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Core.Follow")]
    public enum FollowResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Following = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unfollowed = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlreadyFollowing = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlreadyUnfollowing = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TokenService.ITokenService")]
    public interface ITokenService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/GetTokensFollowed", ReplyAction="http://tempuri.org/ITokenService/GetTokensFollowedResponse")]
        NotificationTest.TokenService.UserToken[] GetTokensFollowed(int userid, int take, int[] skipList, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/GetTokenIDFollowedByUser", ReplyAction="http://tempuri.org/ITokenService/GetTokenIDFollowedByUserResponse")]
        int[] GetTokenIDFollowedByUser(int userid, int take, int[] skipList, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/FollowToken", ReplyAction="http://tempuri.org/ITokenService/FollowTokenResponse")]
        NotificationTest.TokenService.FollowResult FollowToken(int userid, int tokenId, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/UnfollowToken", ReplyAction="http://tempuri.org/ITokenService/UnfollowTokenResponse")]
        NotificationTest.TokenService.FollowResult UnfollowToken(int userid, int tokenId, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/GetTokensFollowedByUser", ReplyAction="http://tempuri.org/ITokenService/GetTokensFollowedByUserResponse")]
        NotificationTest.TokenService.UserToken[] GetTokensFollowedByUser(int meId, int userid, int take, int[] skipList, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/GetTokenByID", ReplyAction="http://tempuri.org/ITokenService/GetTokenByIDResponse")]
        NotificationTest.TokenService.UserToken GetTokenByID(int userId, int tokenId, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/GetTokensInBuzz", ReplyAction="http://tempuri.org/ITokenService/GetTokensInBuzzResponse")]
        NotificationTest.TokenService.UserToken[] GetTokensInBuzz(int userid, int buzzId, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/FollowTokenByName", ReplyAction="http://tempuri.org/ITokenService/FollowTokenByNameResponse")]
        NotificationTest.TokenService.FollowResult FollowTokenByName(int userid, string tokenname, string zat);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITokenServiceChannel : NotificationTest.TokenService.ITokenService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TokenServiceClient : System.ServiceModel.ClientBase<NotificationTest.TokenService.ITokenService>, NotificationTest.TokenService.ITokenService {
        
        public TokenServiceClient() {
        }
        
        public TokenServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TokenServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TokenServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TokenServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NotificationTest.TokenService.UserToken[] GetTokensFollowed(int userid, int take, int[] skipList, string zat) {
            return base.Channel.GetTokensFollowed(userid, take, skipList, zat);
        }
        
        public int[] GetTokenIDFollowedByUser(int userid, int take, int[] skipList, string zat) {
            return base.Channel.GetTokenIDFollowedByUser(userid, take, skipList, zat);
        }
        
        public NotificationTest.TokenService.FollowResult FollowToken(int userid, int tokenId, string zat) {
            return base.Channel.FollowToken(userid, tokenId, zat);
        }
        
        public NotificationTest.TokenService.FollowResult UnfollowToken(int userid, int tokenId, string zat) {
            return base.Channel.UnfollowToken(userid, tokenId, zat);
        }
        
        public NotificationTest.TokenService.UserToken[] GetTokensFollowedByUser(int meId, int userid, int take, int[] skipList, string zat) {
            return base.Channel.GetTokensFollowedByUser(meId, userid, take, skipList, zat);
        }
        
        public NotificationTest.TokenService.UserToken GetTokenByID(int userId, int tokenId, string zat) {
            return base.Channel.GetTokenByID(userId, tokenId, zat);
        }
        
        public NotificationTest.TokenService.UserToken[] GetTokensInBuzz(int userid, int buzzId, string zat) {
            return base.Channel.GetTokensInBuzz(userid, buzzId, zat);
        }
        
        public NotificationTest.TokenService.FollowResult FollowTokenByName(int userid, string tokenname, string zat) {
            return base.Channel.FollowTokenByName(userid, tokenname, zat);
        }
    }
}
