//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NotificationTest.UserService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientType", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Core")]
    public enum ClientType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WindowsAzure = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WindowsPhone7 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WindowsPhone8 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Windows8 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Web = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Accounts")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AgeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BuzzFollowingCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NotificationTest.UserService.Category[] CategoriesFollowingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoriesFollowingCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FollowedCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FollowingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FollowingCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfilePicURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RelationshipStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NotificationTest.UserService.Token[] TokenFollowingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TokenFollowingCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NotificationTest.UserService.CompactUser[] UserFollowedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NotificationTest.UserService.CompactUser[] UsersFollowingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VenueFollowingCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Age {
            get {
                return this.AgeField;
            }
            set {
                if ((this.AgeField.Equals(value) != true)) {
                    this.AgeField = value;
                    this.RaisePropertyChanged("Age");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BuzzFollowingCount {
            get {
                return this.BuzzFollowingCountField;
            }
            set {
                if ((this.BuzzFollowingCountField.Equals(value) != true)) {
                    this.BuzzFollowingCountField = value;
                    this.RaisePropertyChanged("BuzzFollowingCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NotificationTest.UserService.Category[] CategoriesFollowing {
            get {
                return this.CategoriesFollowingField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoriesFollowingField, value) != true)) {
                    this.CategoriesFollowingField = value;
                    this.RaisePropertyChanged("CategoriesFollowing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoriesFollowingCount {
            get {
                return this.CategoriesFollowingCountField;
            }
            set {
                if ((this.CategoriesFollowingCountField.Equals(value) != true)) {
                    this.CategoriesFollowingCountField = value;
                    this.RaisePropertyChanged("CategoriesFollowingCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FollowedCount {
            get {
                return this.FollowedCountField;
            }
            set {
                if ((this.FollowedCountField.Equals(value) != true)) {
                    this.FollowedCountField = value;
                    this.RaisePropertyChanged("FollowedCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Following {
            get {
                return this.FollowingField;
            }
            set {
                if ((this.FollowingField.Equals(value) != true)) {
                    this.FollowingField = value;
                    this.RaisePropertyChanged("Following");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FollowingCount {
            get {
                return this.FollowingCountField;
            }
            set {
                if ((this.FollowingCountField.Equals(value) != true)) {
                    this.FollowingCountField = value;
                    this.RaisePropertyChanged("FollowingCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((this.GenderField.Equals(value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfilePicURL {
            get {
                return this.ProfilePicURLField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfilePicURLField, value) != true)) {
                    this.ProfilePicURLField = value;
                    this.RaisePropertyChanged("ProfilePicURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RelationshipStatus {
            get {
                return this.RelationshipStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationshipStatusField, value) != true)) {
                    this.RelationshipStatusField = value;
                    this.RaisePropertyChanged("RelationshipStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NotificationTest.UserService.Token[] TokenFollowing {
            get {
                return this.TokenFollowingField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenFollowingField, value) != true)) {
                    this.TokenFollowingField = value;
                    this.RaisePropertyChanged("TokenFollowing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TokenFollowingCount {
            get {
                return this.TokenFollowingCountField;
            }
            set {
                if ((this.TokenFollowingCountField.Equals(value) != true)) {
                    this.TokenFollowingCountField = value;
                    this.RaisePropertyChanged("TokenFollowingCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NotificationTest.UserService.CompactUser[] UserFollowed {
            get {
                return this.UserFollowedField;
            }
            set {
                if ((object.ReferenceEquals(this.UserFollowedField, value) != true)) {
                    this.UserFollowedField = value;
                    this.RaisePropertyChanged("UserFollowed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NotificationTest.UserService.CompactUser[] UsersFollowing {
            get {
                return this.UsersFollowingField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersFollowingField, value) != true)) {
                    this.UsersFollowingField = value;
                    this.RaisePropertyChanged("UsersFollowing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VenueFollowingCount {
            get {
                return this.VenueFollowingCountField;
            }
            set {
                if ((this.VenueFollowingCountField.Equals(value) != true)) {
                    this.VenueFollowingCountField = value;
                    this.RaisePropertyChanged("VenueFollowingCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Category")]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PicURLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryID {
            get {
                return this.CategoryIDField;
            }
            set {
                if ((this.CategoryIDField.Equals(value) != true)) {
                    this.CategoryIDField = value;
                    this.RaisePropertyChanged("CategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PicURL {
            get {
                return this.PicURLField;
            }
            set {
                if ((object.ReferenceEquals(this.PicURLField, value) != true)) {
                    this.PicURLField = value;
                    this.RaisePropertyChanged("PicURL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Token", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Token")]
    [System.SerializableAttribute()]
    public partial class Token : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompactUser", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Services.Objects.Accounts")]
    [System.SerializableAttribute()]
    public partial class CompactUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfilePicURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfilePicURL {
            get {
                return this.ProfilePicURLField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfilePicURLField, value) != true)) {
                    this.ProfilePicURLField = value;
                    this.RaisePropertyChanged("ProfilePicURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FollowResult", Namespace="http://schemas.datacontract.org/2004/07/Hangout.Web.Core.Follow")]
    public enum FollowResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Following = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unfollowed = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlreadyFollowing = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlreadyUnfollowing = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserService.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUsersFollowed", ReplyAction="http://tempuri.org/IUserService/GetUsersFollowedResponse")]
        NotificationTest.UserService.User[] GetUsersFollowed(int userid, int take, int[] skipList, string zat, NotificationTest.UserService.ClientType clientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserIDFollowed", ReplyAction="http://tempuri.org/IUserService/GetUserIDFollowedResponse")]
        int[] GetUserIDFollowed(int userid, int take, int[] skipList, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUsersFollowing", ReplyAction="http://tempuri.org/IUserService/GetUsersFollowingResponse")]
        NotificationTest.UserService.User[] GetUsersFollowing(int userid, int take, int[] skipList, string zat, NotificationTest.UserService.ClientType clientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserIDFollowing", ReplyAction="http://tempuri.org/IUserService/GetUserIDFollowingResponse")]
        int[] GetUserIDFollowing(int userid, int take, int[] skipList, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/FollowUser", ReplyAction="http://tempuri.org/IUserService/FollowUserResponse")]
        NotificationTest.UserService.FollowResult FollowUser(int userid, int followUserId, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UnfollowUser", ReplyAction="http://tempuri.org/IUserService/UnfollowUserResponse")]
        NotificationTest.UserService.FollowResult UnfollowUser(int userid, int unFollowUserId, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetPeopleAroundYou", ReplyAction="http://tempuri.org/IUserService/GetPeopleAroundYouResponse")]
        NotificationTest.UserService.User[] GetPeopleAroundYou(int userId, int count, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUser", ReplyAction="http://tempuri.org/IUserService/GetUserResponse")]
        NotificationTest.UserService.User GetUser(int userId, int getuserId, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUsersFollowingByUser", ReplyAction="http://tempuri.org/IUserService/GetUsersFollowingByUserResponse")]
        NotificationTest.UserService.User[] GetUsersFollowingByUser(int meid, int userid, int take, int[] skipList, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUsersFollowedByUser", ReplyAction="http://tempuri.org/IUserService/GetUsersFollowedByUserResponse")]
        NotificationTest.UserService.User[] GetUsersFollowedByUser(int meId, int userid, int take, int[] skipList, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetLocalFollowersByToken", ReplyAction="http://tempuri.org/IUserService/GetLocalFollowersByTokenResponse")]
        NotificationTest.UserService.User[] GetLocalFollowersByToken(int userId, int tokenId, int take, int[] skipList, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetLocalUsersByCategoryFollowing", ReplyAction="http://tempuri.org/IUserService/GetLocalUsersByCategoryFollowingResponse")]
        NotificationTest.UserService.User[] GetLocalUsersByCategoryFollowing(int userid, int categoryId, int take, int[] skipList, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetPeopleWhoFollowBuzz", ReplyAction="http://tempuri.org/IUserService/GetPeopleWhoFollowBuzzResponse")]
        NotificationTest.UserService.User[] GetPeopleWhoFollowBuzz(int userId, int buzzId, int take, int[] skipList, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetPeopleWhoFollowVenue", ReplyAction="http://tempuri.org/IUserService/GetPeopleWhoFollowVenueResponse")]
        NotificationTest.UserService.User[] GetPeopleWhoFollowVenue(int userId, int venueId, int take, int[] skipList, string zat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/PeopleNearVenue", ReplyAction="http://tempuri.org/IUserService/PeopleNearVenueResponse")]
        NotificationTest.UserService.User[] PeopleNearVenue(int userId, int venueId, int take, int[] skipList, string zat);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : NotificationTest.UserService.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<NotificationTest.UserService.IUserService>, NotificationTest.UserService.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NotificationTest.UserService.User[] GetUsersFollowed(int userid, int take, int[] skipList, string zat, NotificationTest.UserService.ClientType clientType) {
            return base.Channel.GetUsersFollowed(userid, take, skipList, zat, clientType);
        }
        
        public int[] GetUserIDFollowed(int userid, int take, int[] skipList, string zat) {
            return base.Channel.GetUserIDFollowed(userid, take, skipList, zat);
        }
        
        public NotificationTest.UserService.User[] GetUsersFollowing(int userid, int take, int[] skipList, string zat, NotificationTest.UserService.ClientType clientType) {
            return base.Channel.GetUsersFollowing(userid, take, skipList, zat, clientType);
        }
        
        public int[] GetUserIDFollowing(int userid, int take, int[] skipList, string zat) {
            return base.Channel.GetUserIDFollowing(userid, take, skipList, zat);
        }
        
        public NotificationTest.UserService.FollowResult FollowUser(int userid, int followUserId, string zat) {
            return base.Channel.FollowUser(userid, followUserId, zat);
        }
        
        public NotificationTest.UserService.FollowResult UnfollowUser(int userid, int unFollowUserId, string zat) {
            return base.Channel.UnfollowUser(userid, unFollowUserId, zat);
        }
        
        public NotificationTest.UserService.User[] GetPeopleAroundYou(int userId, int count, string zat) {
            return base.Channel.GetPeopleAroundYou(userId, count, zat);
        }
        
        public NotificationTest.UserService.User GetUser(int userId, int getuserId, string zat) {
            return base.Channel.GetUser(userId, getuserId, zat);
        }
        
        public NotificationTest.UserService.User[] GetUsersFollowingByUser(int meid, int userid, int take, int[] skipList, string zat) {
            return base.Channel.GetUsersFollowingByUser(meid, userid, take, skipList, zat);
        }
        
        public NotificationTest.UserService.User[] GetUsersFollowedByUser(int meId, int userid, int take, int[] skipList, string zat) {
            return base.Channel.GetUsersFollowedByUser(meId, userid, take, skipList, zat);
        }
        
        public NotificationTest.UserService.User[] GetLocalFollowersByToken(int userId, int tokenId, int take, int[] skipList, string zat) {
            return base.Channel.GetLocalFollowersByToken(userId, tokenId, take, skipList, zat);
        }
        
        public NotificationTest.UserService.User[] GetLocalUsersByCategoryFollowing(int userid, int categoryId, int take, int[] skipList, string zat) {
            return base.Channel.GetLocalUsersByCategoryFollowing(userid, categoryId, take, skipList, zat);
        }
        
        public NotificationTest.UserService.User[] GetPeopleWhoFollowBuzz(int userId, int buzzId, int take, int[] skipList, string zat) {
            return base.Channel.GetPeopleWhoFollowBuzz(userId, buzzId, take, skipList, zat);
        }
        
        public NotificationTest.UserService.User[] GetPeopleWhoFollowVenue(int userId, int venueId, int take, int[] skipList, string zat) {
            return base.Channel.GetPeopleWhoFollowVenue(userId, venueId, take, skipList, zat);
        }
        
        public NotificationTest.UserService.User[] PeopleNearVenue(int userId, int venueId, int take, int[] skipList, string zat) {
            return base.Channel.PeopleNearVenue(userId, venueId, take, skipList, zat);
        }
    }
}
